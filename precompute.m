(* ::Package:: *)

(* ::Input:: *)
(*CloseKernels[];*)
(*LaunchKernels[6];*)


(* ::Input:: *)
(*(*Univariate Lagrange Polynomial*)*)
(*LagrangeUni[q_Integer,j_Integer]:=Product[(q*\[Xi]-k)/(j-k),{k,Drop[Range[0,q],{j+1}]}];*)
(*(*Lagrange Polynomial*)*)
(*Lagrange[n_Integer,s_Integer,p_Integer,i_List]:=*)
(*(LagrangeUni[p-Sum[i[[j]],{j,1,s}],p-Sum[i[[j]],{j,1,s}]]/.{\[Xi]->1-Sum[Subscript[\[Xi],j],{j,1,s}]})**)
(*Product[LagrangeUni[i[[j]],i[[j]]]/.{\[Xi]->Subscript[\[Xi],j]},{j,1,s}]**)
(*Product[LagrangeUni[p,i[[j]]]/.{\[Xi]->Subscript[\[Xi],j]},{j,s+1,n}]*)
(*(*Index set for the geometric map*)*)
(*IndexSet[n_Integer,s_Integer,p_Integer]:=Select[*)
(*Tuples[Range[0,p],n],*)
(*(Total[Take[#,s]]<=p&&AllTrue[Drop[#,s],LessEqualThan[p]])&*)
(*];*)
(*(*Index set for the jacobian*)*)
(*IndexSetJ[n_Integer,s_Integer,p_Integer]:=Select[*)
(*Tuples[Range[0,n*p-1],n],*)
(*(Total[Take[#,s]]<=n*p-s&&AllTrue[Drop[#,s],LessEqualThan[n*p-1]])&*)
(*];*)
(*(*Single component of the geometric map at time T*)*)
(*GMComponent[n_Integer,s_Integer,p_Integer,T_Integer]:=Sum[Subscript[V,Append[i,T]]*Lagrange[n,s,p,i],{i,IndexSet[n,s,p]}]*)
(*(*Variable names*)*)
(*VarSet[n_Integer]:=Take[{X,Y,Z,W},n];*)
(*(*Geometric map at time T*)*)
(*GeoMap[n_Integer,s_Integer,p_Integer]:=Table[((1-T)*GMComponent[n,s,p,0]+T*GMComponent[n,s,p,1])/.{V->x},{x,VarSet[n]}]~Join~{T};*)
(*(*Jacobian determinant*)*)
(*JacDet[n_Integer,s_Integer,p_Integer]:=Det[D[GeoMap[n,s,p],{Table[Subscript[\[Xi],i],{i,n}]~Join~{T}}]]*)
(*(*Domain points*)*)
(*DomainPointsT[n_Integer,s_Integer,p_Integer]:=Flatten[Outer[Join,*)
(*Map[*)
(*Join[Take[#,s]/Max[n*p-s,1],Drop[#,s]/Max[n*p-1,1]]&,*)
(*IndexSetJ[n,s,p]*)
(*],List/@Table[t,{t,0,1,1/n}],1],1];*)
(*(*Lagrange Vector*)*)
(*LagVector[n_Integer,s_Integer,p_Integer]:=Module[{poly,pts,rules},*)
(*poly=JacDet[n,s,p];*)
(*pts=DomainPointsT[n,s,p];*)
(*rules[pt_]:=Table[Subscript[\[Xi],i]->pt[[i]],{i,n}]~Join~{T->pt[[n+1]]};*)
(*ParallelTable[poly/.rules[pt],{pt,pts}]*)
(*];*)
(*(*Pretty print*)*)
(*MySimplify=FullSimplify[#,Trig->False,TimeConstraint->1,ComplexityFunction->LeafCount]&;*)
(*PrintVector[n_Integer,s_Integer,p_Integer]:=Print[MatrixForm[MySimplify[LagVector[n,s,p]]]];*)
(*CExpression[n_Integer,s_Integer,p_Integer]:=Print[CForm/@MySimplify[LagVector[n,s,p]]];*)
(**)
(*(*Test*)*)
(*CExpression[2,2,2]*)
(*(*LagVector[2,2,2]*)*)
(*(*Plot3D[{Lagrange[2,2,3,{2,0}],0},{Subscript[\[Xi],1],0,1}, {Subscript[\[Xi],2],0,1-Subscript[\[Xi],1]}]*)*)
