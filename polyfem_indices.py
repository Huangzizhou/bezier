def index_set_polyfem(n, s, p):
	if n == 1:
		return [(i,) for i in range(p+1)]
	# elif n == 2:
	# 	if s == 2:
	# 		I = [0 for i in range(((p+1)*(p+2))//2)]
	# 		I[0] = (0,0)
	# 		I[1] = (p,0)
	# 		I[2] = (0,p)
	# 		if p > 1:
	# 			for i in range(p-1):
	# 				I[i+3] = (i+1,0)
	# 				I[i+p+2] = (p-i-1, i+1)
	# 				I[i+p*2+1] = (0, p-i-1)
	# 		if p > 2:
	# 			inner_node_id = 3*p
	# 			for i in range(p-2):
	# 				for j in range(p-2-i):
	# 					I[inner_node_id] = (i+1, j+1)
	# 					inner_node_id += 1
	# 		return I
	# 	else:
	# 		I = [0 for i in range((p+1)**2)]
	# 		I[0] = (0,0)
	# 		I[1] = (p,0)
	# 		I[2] = (p,p)
	# 		I[2] = (0,p)
	# 		if p > 1:
	# 			for i in range(p-1):
	# 				I[i+3] = (i+1,0)
	# 		return []
	elif (n,s,p) == (2,1,1):
		return [
			(0,0),
			(1,0),
			(1,1),
			(0,1),
		]
	elif (n,s,p) == (2,1,2):
		return [
			(0,0),
			(2,0),
			(2,2),
			(0,2),
			(1,0),
			(2,1),
			(1,2),
			(0,1),
			(1,1),
		]
	elif (n,s,p) == (2,1,3):
		return [
			(0,0),
			(3,0),
			(3,3),
			(0,3),
			(1,0),
			(2,0),
			(3,1),
			(3,2),
			(2,3),
			(1,3),
			(0,2),
			(0,1),
			(1,1),
			(1,2),
			(2,1),
			(2,2),
		]
	elif (n,s,p) == (2,2,1):
		return [
			(0,0),
			(1,0),
			(0,1),
		]
	elif (n,s,p) == (2,2,2):
		return [
			(0,0),
			(2,0),
			(0,2),
			(1,0),
			(1,1),
			(0,1),
		]
	elif (n,s,p) == (2,2,3):
		return [
			(0,0),
			(3,0),
			(0,3),
			(1,0),
			(2,0),
			(2,1),
			(1,2),
			(0,2),
			(0,1),
			(1,1),
		]
	elif (n,s,p) == (2,2,4):
		return [
			(0,0),
			(4,0),
			(0,4),
			(1,0),
			(2,0),
			(3,0),
			(3,1),
			(2,2),
			(1,3),
			(0,3),
			(0,2),
			(0,1),
			(1,1),
			(1,2),
			(2,1),
		]
	elif (n,s,p) == (3,3,1):
		return [
			(0,0,0),
			(1,0,0),
			(0,1,0),
			(0,0,1),
		]
	elif (n,s,p) == (3,1,1):
		return [
			(0,0,0),
			(1,0,0),
			(1,1,0),
			(0,1,0),
			(0,0,1),
			(1,0,1),
			(1,1,1),
			(0,1,1),
		]
	elif (n,s,p) == (3,1,2):
		return [
			(0, 0, 0),
			(2, 0, 0),
			(2, 2, 0),
			(0, 2, 0),
			(0, 0, 2),
			(2, 0, 2),
			(2, 2, 2),
			(0, 2, 2),
			(1, 0, 0),
			(2, 1, 0),
			(1, 2, 0),
			(0, 1, 0),
			(0, 0, 1),
			(2, 0, 1),
			(2, 2, 1),
			(0, 2, 1),
			(1, 0, 2),
			(2, 1, 2),
			(1, 2, 2),
			(0, 1, 2),
		]
	elif (n,s,p) == (3,3,2):
		return [
			(0,0,0),
			(2,0,0),
			(0,2,0),
			(0,0,2),
			(1,0,0),
			(1,1,0),
			(0,1,0),
			(0,0,1),
			(1,0,1),
			(0,1,1),
		]
	elif (n,s,p) == (3,3,3):
		return [
			(0,0,0),
			(3,0,0),
			(0,3,0),
			(0,0,3),
			(1,0,0),
			(2,0,0),
			(2,1,0),
			(1,2,0),
			(0,2,0),
			(0,1,0),
			(0,0,1),
			(0,0,2),
			(2,0,1),
			(1,0,2),
			(0,2,1),
			(0,1,2),
			(1,1,0),
			(1,0,1),
			(1,1,1),
			(0,1,1),
		]
	elif (n,s,p) == (3,3,4):
		return [
			(0,0,0),
			(4,0,0),
			(0,4,0),
			(0,0,4),
			(1,0,0),
			(2,0,0),
			(3,0,0),
			(3,1,0),
			(2,2,0),
			(1,3,0),
			(0,3,0),
			(0,2,0),
			(0,1,0),
			(0,0,1),
			(0,0,2),
			(0,0,3),
			(3,0,1),
			(2,0,2),
			(1,0,3),
			(0,3,1),
			(0,2,2),
			(0,1,3),
			(1,1,0),
			(1,2,0),
			(2,1,0),
			(1,0,1),
			(1,0,2),
			(2,0,1),
			(2,1,1),
			(1,1,2),
			(1,2,1),
			(0,1,1),
			(0,1,2),
			(0,2,1),
			(1,1,1),
		]
	else: raise Exception(f'Unknown signature ({n}, {s}, {p})')