#include "lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVectorT<2, 2, 2>(const std::span<const fp_t> cpFP, const std::span<Interval> out) {
	assert(out.size() == 18);
	const uint S = cpFP.size();
	std::vector<Interval> cp(S);
	for (uint i = 0; i < S; ++i) cp[i] = cpFP[i];
	I tmp_0 = cp[14]*cp[20];
	I tmp_1 = 12*cp[0];
	I tmp_2 = 12*cp[2];
	I tmp_3 = cp[22]*cp[4];
	I tmp_4 = 4*tmp_3;
	I tmp_5 = cp[0]*cp[6];
	I tmp_6 = 3*tmp_5;
	I tmp_7 = cp[2]*cp[4];
	I tmp_8 = cp[20]*cp[6];
	I tmp_9 = 4*tmp_8;
	I tmp_10 = cp[12]*cp[22];
	I tmp_11 = cp[2]*cp[8];
	I tmp_12 = cp[0]*cp[10];
	I tmp_13 = -3*tmp_11 + 3*tmp_12;
	I tmp_14 = cp[10]*cp[12];
	I tmp_15 = cp[14]*cp[8];
	I tmp_16 = -4*tmp_14 + 4*tmp_15;
	I tmp_17 = cp[10]*cp[4];
	I tmp_18 = cp[6]*cp[8];
	I tmp_19 = tmp_17 - tmp_18;
	I tmp_20 = cp[20]*cp[7];
	I tmp_21 = cp[21]*cp[6];
	I tmp_22 = cp[21]*cp[7];
	I tmp_23 = cp[22]*cp[5];
	I tmp_24 = cp[23]*cp[4];
	I tmp_25 = cp[23]*cp[5];
	I tmp_26 = 4*cp[21];
	I tmp_27 = 4*cp[20];
	I tmp_28 = 3*cp[0];
	I tmp_29 = 3*cp[12];
	I tmp_30 = 3*cp[13];
	I tmp_31 = 3*cp[1];
	I tmp_32 = 3*cp[20];
	I tmp_33 = 3*cp[21];
	I tmp_34 = 4*cp[23];
	I tmp_35 = 4*cp[22];
	I tmp_36 = (R(3, 4))*tmp_5;
	I tmp_37 = (R(3, 4))*cp[0];
	I tmp_38 = cp[7]*tmp_37;
	I tmp_39 = (R(3, 4))*cp[1];
	I tmp_40 = cp[6]*tmp_39;
	I tmp_41 = cp[1]*cp[7];
	I tmp_42 = (R(3, 4))*tmp_41;
	I tmp_43 = (R(3, 4))*cp[2];
	I tmp_44 = (R(3, 4))*cp[3];
	I tmp_45 = cp[3]*cp[5];
	I tmp_46 = cp[3]*cp[9];
	I tmp_47 = cp[11]*cp[1];
	I tmp_48 = cp[10]*tmp_39 + cp[11]*tmp_37 - cp[8]*tmp_44 - cp[9]*tmp_43 - R(3, 4)*tmp_11 + (R(3, 4))*tmp_12 - R(3, 4)*tmp_46 + (R(3, 4))*tmp_47;
	I tmp_49 = cp[14]*cp[9];
	I tmp_50 = cp[15]*cp[8];
	I tmp_51 = cp[15]*cp[9];
	I tmp_52 = cp[10]*cp[13];
	I tmp_53 = cp[11]*cp[12];
	I tmp_54 = cp[11]*cp[13];
	I tmp_55 = -tmp_14 + tmp_15 + tmp_49 + tmp_50 + tmp_51 - tmp_52 - tmp_53 - tmp_54;
	I tmp_56 = (R(1, 4))*tmp_18;
	I tmp_57 = (R(1, 4))*cp[6];
	I tmp_58 = cp[9]*tmp_57;
	I tmp_59 = (R(1, 4))*cp[7];
	I tmp_60 = cp[8]*tmp_59;
	I tmp_61 = cp[7]*cp[9];
	I tmp_62 = (R(1, 4))*tmp_61;
	I tmp_63 = (R(1, 4))*tmp_17;
	I tmp_64 = (R(1, 4))*cp[10];
	I tmp_65 = cp[5]*tmp_64;
	I tmp_66 = (R(1, 4))*cp[11];
	I tmp_67 = cp[4]*tmp_66;
	I tmp_68 = cp[11]*cp[5];
	I tmp_69 = (R(1, 4))*tmp_68;
	I tmp_70 = -tmp_56 - tmp_58 - tmp_60 - tmp_62 + tmp_63 + tmp_65 + tmp_67 + tmp_69;
	I tmp_71 = 3*tmp_41;
	I tmp_72 = 3*tmp_46;
	I tmp_73 = 16*cp[21];
	I tmp_74 = -4*tmp_22 + 4*tmp_25;
	I tmp_75 = -4*tmp_51 + 4*tmp_54;
	I tmp_76 = tmp_61 - tmp_68;
	I tmp_77 = 2*cp[0];
	I tmp_78 = cp[22]*tmp_77;
	I tmp_79 = 2*cp[10];
	I tmp_80 = cp[20]*tmp_79;
	I tmp_81 = 2*cp[2];
	I tmp_82 = cp[12]*tmp_81;
	I tmp_83 = 2*cp[8];
	I tmp_84 = cp[18]*tmp_83;
	I tmp_85 = cp[0]*cp[18];
	I tmp_86 = cp[16]*cp[2];
	I tmp_87 = tmp_5 - tmp_7;
	I tmp_88 = -tmp_11 + tmp_12;
	I tmp_89 = -2*tmp_85 + 2*tmp_86 + tmp_87 + tmp_88;
	I tmp_90 = -2*tmp_14 + 2*tmp_15 + tmp_19;
	I tmp_91 = (R(1, 2))*cp[0];
	I tmp_92 = cp[22]*tmp_91;
	I tmp_93 = cp[23]*tmp_91;
	I tmp_94 = (R(1, 2))*cp[10];
	I tmp_95 = cp[20]*tmp_94;
	I tmp_96 = cp[21]*tmp_94;
	I tmp_97 = (R(1, 2))*cp[11];
	I tmp_98 = cp[20]*tmp_97;
	I tmp_99 = cp[21]*tmp_97;
	I tmp_100 = (R(1, 2))*cp[12];
	I tmp_101 = cp[2]*tmp_100;
	I tmp_102 = cp[3]*tmp_100;
	I tmp_103 = (R(1, 2))*cp[13];
	I tmp_104 = cp[2]*tmp_103;
	I tmp_105 = cp[3]*tmp_103;
	I tmp_106 = (R(1, 2))*cp[18];
	I tmp_107 = cp[8]*tmp_106;
	I tmp_108 = cp[9]*tmp_106;
	I tmp_109 = (R(1, 2))*cp[19];
	I tmp_110 = cp[8]*tmp_109;
	I tmp_111 = cp[9]*tmp_109;
	I tmp_112 = (R(1, 2))*cp[1];
	I tmp_113 = cp[22]*tmp_112;
	I tmp_114 = cp[23]*tmp_112;
	I tmp_115 = cp[16]*cp[3];
	I tmp_116 = cp[17]*cp[2];
	I tmp_117 = cp[17]*cp[3];
	I tmp_118 = cp[0]*cp[19];
	I tmp_119 = cp[18]*cp[1];
	I tmp_120 = cp[19]*cp[1];
	I tmp_121 = (R(1, 4))*tmp_7;
	I tmp_122 = (R(1, 4))*cp[2];
	I tmp_123 = cp[5]*tmp_122;
	I tmp_124 = (R(1, 4))*cp[3];
	I tmp_125 = cp[4]*tmp_124;
	I tmp_126 = (R(1, 4))*tmp_45;
	I tmp_127 = (R(1, 4))*tmp_5;
	I tmp_128 = cp[0]*tmp_59;
	I tmp_129 = cp[1]*tmp_57;
	I tmp_130 = (R(1, 4))*tmp_41;
	I tmp_131 = -tmp_121 - tmp_123 - tmp_125 - tmp_126 + tmp_127 + tmp_128 + tmp_129 + tmp_130;
	I tmp_132 = cp[0]*tmp_66 + cp[1]*tmp_64 - cp[8]*tmp_124 - cp[9]*tmp_122 - R(1, 4)*tmp_11 + (R(1, 4))*tmp_12 - R(1, 4)*tmp_46 + (R(1, 4))*tmp_47;
	I tmp_133 = (R(1, 2))*tmp_115 + (R(1, 2))*tmp_116 + (R(1, 2))*tmp_117 - R(1, 2)*tmp_118 - R(1, 2)*tmp_119 - R(1, 2)*tmp_120 + tmp_131 + tmp_132 - R(1, 2)*tmp_85 + (R(1, 2))*tmp_86;
	I tmp_134 = -R(1, 2)*tmp_14 + (R(1, 2))*tmp_15 + (R(1, 2))*tmp_49 + (R(1, 2))*tmp_50 + (R(1, 2))*tmp_51 - R(1, 2)*tmp_52 - R(1, 2)*tmp_53 - R(1, 2)*tmp_54 + tmp_70;
	I tmp_135 = 2*cp[11];
	I tmp_136 = cp[21]*tmp_135;
	I tmp_137 = 2*tmp_117;
	I tmp_138 = 2*cp[9];
	I tmp_139 = cp[19]*tmp_138;
	I tmp_140 = 2*tmp_120;
	I tmp_141 = tmp_46 - tmp_47;
	I tmp_142 = tmp_141 - 2*tmp_51 + 2*tmp_54 + tmp_76;
	I tmp_143 = 2*cp[3];
	I tmp_144 = 2*cp[1];
	I tmp_145 = -cp[13]*tmp_143 + cp[15]*tmp_144 + cp[21]*tmp_143 - cp[23]*tmp_144;
	I tmp_146 = 12*cp[10];
	I tmp_147 = 12*cp[8];
	I tmp_148 = 3*tmp_17;
	I tmp_149 = 16*cp[18];
	I tmp_150 = -4*tmp_85 + 4*tmp_86;
	I tmp_151 = 3*cp[18];
	I tmp_152 = 3*cp[19];
	I tmp_153 = 3*cp[10];
	I tmp_154 = 3*cp[11];
	I tmp_155 = 3*cp[22];
	I tmp_156 = 3*cp[23];
	I tmp_157 = (R(3, 4))*tmp_17;
	I tmp_158 = (R(3, 4))*cp[10]*cp[5];
	I tmp_159 = (R(3, 4))*cp[11]*cp[4];
	I tmp_160 = (R(3, 4))*tmp_68;
	I tmp_161 = tmp_115 + tmp_116 + tmp_117 - tmp_118 - tmp_119 - tmp_120 - tmp_85 + tmp_86;
	I tmp_162 = 12*cp[11];
	I tmp_163 = 12*cp[9];
	I tmp_164 = 4*tmp_120;
	I tmp_165 = 4*tmp_117;
	I tmp_166 = 3*tmp_61 - 3*tmp_68;
	I tmp_167 = tmp_41 - tmp_45;
	I tmp_168 = 2*tmp_8;
	I tmp_169 = 2*tmp_3;
	I tmp_170 = 2*cp[4];
	I tmp_171 = 2*cp[6];
	I tmp_172 = cp[12]*tmp_171 - cp[14]*tmp_170 - cp[16]*tmp_171 + cp[18]*tmp_170;
	I tmp_173 = (R(1, 2))*cp[20];
	I tmp_174 = (R(1, 2))*cp[21];
	I tmp_175 = (R(1, 2))*tmp_3;
	I tmp_176 = (R(1, 2))*tmp_23;
	I tmp_177 = (R(1, 2))*tmp_24;
	I tmp_178 = (R(1, 2))*tmp_25;
	I tmp_179 = (R(1, 2))*tmp_8;
	I tmp_180 = (R(1, 2))*tmp_20;
	I tmp_181 = (R(1, 2))*tmp_21;
	I tmp_182 = (R(1, 2))*tmp_22;
	I tmp_183 = (R(1, 2))*cp[14];
	I tmp_184 = (R(1, 2))*cp[15];
	I tmp_185 = (R(1, 2))*cp[16];
	I tmp_186 = (R(1, 2))*cp[17];
	I tmp_187 = cp[4]*tmp_106 + cp[4]*tmp_109 - cp[4]*tmp_183 - cp[4]*tmp_184 + cp[5]*tmp_106 + cp[5]*tmp_109 - cp[5]*tmp_183 - cp[5]*tmp_184 + cp[6]*tmp_100 + cp[6]*tmp_103 - cp[6]*tmp_185 - cp[6]*tmp_186 + cp[7]*tmp_100 + cp[7]*tmp_103 - cp[7]*tmp_185 - cp[7]*tmp_186;
	I tmp_188 = 2*cp[5];
	I tmp_189 = cp[15]*tmp_188;
	I tmp_190 = 2*cp[7];
	I tmp_191 = cp[17]*tmp_190;
	I tmp_192 = tmp_167 - 2*tmp_22 + 2*tmp_25;
	I tmp_193 = (R(1, 2))*cp[22];
	I tmp_194 = (R(1, 2))*cp[23];
	I tmp_195 = 3*cp[14];
	I tmp_196 = 3*cp[15];
	I tmp_197 = 3*cp[16];
	I tmp_198 = 3*cp[17];
	I tmp_199 = 4*cp[12];
	I tmp_200 = 4*cp[13];
	I tmp_201 = 12*cp[5];
	I tmp_202 = 12*cp[7];
	out[0] = -cp[12]*tmp_2 + cp[14]*tmp_1 + cp[20]*tmp_2 - cp[22]*tmp_1 - 16*tmp_0 + 16*tmp_10 + tmp_13 + tmp_16 + tmp_19 - tmp_4 - tmp_6 + 3*tmp_7 + tmp_9;
	out[1] = cp[12]*tmp_34 + cp[13]*tmp_34 + cp[13]*tmp_35 - cp[14]*tmp_26 + cp[14]*tmp_28 + cp[14]*tmp_31 - cp[15]*tmp_26 - cp[15]*tmp_27 + cp[15]*tmp_28 + cp[15]*tmp_31 - cp[22]*tmp_28 - cp[22]*tmp_31 - cp[23]*tmp_28 - cp[23]*tmp_31 - cp[2]*tmp_29 - cp[2]*tmp_30 + cp[2]*tmp_32 + cp[2]*tmp_33 - cp[3]*tmp_29 - cp[3]*tmp_30 + cp[3]*tmp_32 + cp[3]*tmp_33 + cp[4]*tmp_44 + cp[5]*tmp_43 - 4*tmp_0 + 4*tmp_10 + tmp_20 + tmp_21 + tmp_22 - tmp_23 - tmp_24 - tmp_25 - tmp_3 - tmp_36 - tmp_38 - tmp_40 - tmp_42 + (R(3, 4))*tmp_45 + tmp_48 + tmp_55 + (R(3, 4))*tmp_7 + tmp_70 + tmp_8;
	out[2] = 3*cp[11]*cp[1] + 16*cp[13]*cp[23] - 12*cp[13]*cp[3] + 12*cp[15]*cp[1] - cp[15]*tmp_73 - 12*cp[1]*cp[23] + 12*cp[21]*cp[3] + 3*cp[3]*cp[5] - tmp_71 - tmp_72 - tmp_74 - tmp_75 - tmp_76;
	out[3] = 2*cp[0]*cp[14] + 2*cp[10]*cp[16] + 2*cp[20]*cp[2] + 2*cp[22]*cp[8] - tmp_78 - tmp_80 - tmp_82 - tmp_84 - tmp_89 - tmp_90;
	out[4] = (R(1, 2))*cp[0]*cp[14] + (R(1, 2))*cp[0]*cp[15] + (R(1, 2))*cp[10]*cp[16] + (R(1, 2))*cp[10]*cp[17] + (R(1, 2))*cp[11]*cp[16] + (R(1, 2))*cp[11]*cp[17] + (R(1, 2))*cp[14]*cp[1] + (R(1, 2))*cp[15]*cp[1] + (R(1, 2))*cp[20]*cp[2] + (R(1, 2))*cp[20]*cp[3] + (R(1, 2))*cp[21]*cp[2] + (R(1, 2))*cp[21]*cp[3] + (R(1, 2))*cp[22]*cp[8] + (R(1, 2))*cp[22]*cp[9] + (R(1, 2))*cp[23]*cp[8] + (R(1, 2))*cp[23]*cp[9] - tmp_101 - tmp_102 - tmp_104 - tmp_105 - tmp_107 - tmp_108 - tmp_110 - tmp_111 - tmp_113 - tmp_114 - tmp_133 - tmp_134 - tmp_92 - tmp_93 - tmp_95 - tmp_96 - tmp_98 - tmp_99;
	out[5] = cp[17]*tmp_135 + cp[23]*tmp_138 - tmp_136 - tmp_137 - tmp_139 + tmp_140 + tmp_142 + tmp_145 - tmp_41 + tmp_45;
	out[6] = -16*cp[16]*cp[22] + cp[16]*tmp_146 - cp[18]*tmp_147 - cp[20]*tmp_146 + cp[20]*tmp_149 + cp[22]*tmp_147 + tmp_13 - tmp_148 + tmp_150 + 3*tmp_18 + tmp_4 + tmp_87 - tmp_9;
	out[7] = -cp[10]*tmp_32 - cp[10]*tmp_33 - cp[11]*tmp_32 - cp[11]*tmp_33 + cp[16]*tmp_153 + cp[16]*tmp_154 - cp[16]*tmp_34 - cp[16]*tmp_35 + cp[17]*tmp_153 + cp[17]*tmp_154 - cp[17]*tmp_34 - cp[17]*tmp_35 + cp[18]*tmp_26 + cp[18]*tmp_27 + cp[19]*tmp_26 + cp[19]*tmp_27 + (R(3, 4))*cp[6]*cp[9] + (R(3, 4))*cp[7]*cp[8] - cp[8]*tmp_151 - cp[8]*tmp_152 + cp[8]*tmp_155 + cp[8]*tmp_156 - cp[9]*tmp_151 - cp[9]*tmp_152 + cp[9]*tmp_155 + cp[9]*tmp_156 + tmp_131 - tmp_157 - tmp_158 - tmp_159 - tmp_160 + tmp_161 + (R(3, 4))*tmp_18 - tmp_20 - tmp_21 - tmp_22 + tmp_23 + tmp_24 + tmp_25 + tmp_3 + tmp_48 + (R(3, 4))*tmp_61 - tmp_8;
	out[8] = -16*cp[17]*cp[23] + cp[17]*tmp_162 - cp[19]*tmp_163 + cp[19]*tmp_73 - cp[21]*tmp_162 + cp[23]*tmp_163 - tmp_164 + tmp_165 + tmp_166 + tmp_167 + 3*tmp_47 - tmp_72 + tmp_74;
	out[9] = cp[14]*tmp_77 + cp[20]*tmp_81 - tmp_168 + tmp_169 - tmp_17 + tmp_172 + tmp_18 - tmp_78 - tmp_82 + tmp_89;
	out[10] = cp[14]*tmp_112 + cp[14]*tmp_91 + cp[15]*tmp_112 + cp[15]*tmp_91 + cp[2]*tmp_173 + cp[2]*tmp_174 + cp[3]*tmp_173 + cp[3]*tmp_174 - tmp_101 - tmp_102 - tmp_104 - tmp_105 - tmp_113 - tmp_114 + tmp_133 + tmp_175 + tmp_176 + tmp_177 + tmp_178 - tmp_179 - tmp_180 - tmp_181 - tmp_182 + tmp_187 + tmp_56 + tmp_58 + tmp_60 + tmp_62 - tmp_63 - tmp_65 - tmp_67 - tmp_69 - tmp_92 - tmp_93;
	out[11] = cp[13]*tmp_190 + cp[19]*tmp_188 + tmp_137 - tmp_140 + tmp_145 - tmp_189 - tmp_191 + tmp_192 - tmp_46 + tmp_47 + tmp_76;
	out[12] = cp[16]*tmp_79 + cp[22]*tmp_83 + tmp_168 - tmp_169 + tmp_172 - tmp_5 + tmp_7 - tmp_80 - tmp_84 + tmp_88 + tmp_90;
	out[13] = cp[16]*tmp_94 + cp[16]*tmp_97 + cp[17]*tmp_94 + cp[17]*tmp_97 + cp[8]*tmp_193 + cp[8]*tmp_194 + cp[9]*tmp_193 + cp[9]*tmp_194 - tmp_107 - tmp_108 - tmp_110 - tmp_111 + tmp_121 + tmp_123 + tmp_125 + tmp_126 - tmp_127 - tmp_128 - tmp_129 - tmp_130 + tmp_132 + tmp_134 - tmp_175 - tmp_176 - tmp_177 - tmp_178 + tmp_179 + tmp_180 + tmp_181 + tmp_182 + tmp_187 - tmp_95 - tmp_96 - tmp_98 - tmp_99;
	out[14] = 2*cp[11]*cp[17] + 2*cp[13]*cp[7] + 2*cp[19]*cp[5] + 2*cp[23]*cp[9] - tmp_136 - tmp_139 - tmp_142 - tmp_189 - tmp_191 - tmp_192;
	out[15] = 12*cp[12]*cp[6] - cp[12]*tmp_149 + 16*cp[14]*cp[16] - 12*cp[14]*cp[4] - 12*cp[16]*cp[6] + 12*cp[18]*cp[4] + 3*cp[2]*cp[4] + 3*cp[6]*cp[8] - tmp_148 - tmp_150 - tmp_16 - tmp_6 - tmp_88;
	out[16] = 3*cp[12]*cp[6] + 3*cp[12]*cp[7] + 3*cp[13]*cp[6] + 3*cp[13]*cp[7] + 4*cp[14]*cp[16] + 4*cp[14]*cp[17] + 4*cp[15]*cp[16] + 4*cp[15]*cp[17] + 3*cp[18]*cp[4] + 3*cp[18]*cp[5] - cp[18]*tmp_199 - cp[18]*tmp_200 + 3*cp[19]*cp[4] + 3*cp[19]*cp[5] - cp[19]*tmp_199 - cp[19]*tmp_200 + (R(3, 4))*cp[2]*cp[4] + (R(3, 4))*cp[2]*cp[5] + (R(3, 4))*cp[3]*cp[4] + (R(3, 4))*cp[3]*cp[5] - cp[4]*tmp_195 - cp[4]*tmp_196 - cp[5]*tmp_195 - cp[5]*tmp_196 + (R(3, 4))*cp[6]*cp[8] + (R(3, 4))*cp[6]*cp[9] - cp[6]*tmp_197 - cp[6]*tmp_198 + (R(3, 4))*cp[7]*cp[8] + (R(3, 4))*cp[7]*cp[9] - cp[7]*tmp_197 - cp[7]*tmp_198 - tmp_132 - tmp_157 - tmp_158 - tmp_159 - tmp_160 - tmp_161 - tmp_36 - tmp_38 - tmp_40 - tmp_42 - tmp_55;
	out[17] = -16*cp[13]*cp[19] + cp[13]*tmp_202 + 16*cp[15]*cp[17] - cp[15]*tmp_201 - cp[17]*tmp_202 + cp[19]*tmp_201 + tmp_141 + tmp_164 - tmp_165 + tmp_166 + 3*tmp_45 - tmp_71 + tmp_75;
}}
#undef R
#undef I