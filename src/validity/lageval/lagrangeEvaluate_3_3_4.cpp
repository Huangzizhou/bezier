#include "../lagrangeEvaluate.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
Interval lagrangeEvaluate<3, 3, 4>(
	const std::span<const fp_t> xFP,
	const std::span<const Interval> lagVec
) {
	assert(xFP.size() == 3);
	assert(lagVec.size() == 35);
	std::array<Interval, 3> x;
	for (uint i = 0; i < 3; ++i) x[i] = xFP[i];
	Interval acc = 0.;
	I tmp_0 = powi(x[0], 4);
	I tmp_1 = (R(32, 3))*tmp_0;
	I tmp_2 = powi(x[1], 4);
	I tmp_3 = (R(32, 3))*tmp_2;
	I tmp_4 = powi(x[2], 4);
	I tmp_5 = (R(32, 3))*tmp_4;
	I tmp_6 = powi(x[1], 2);
	I tmp_7 = powi(x[0], 2);
	I tmp_8 = 64*tmp_7;
	I tmp_9 = tmp_6*tmp_8;
	I tmp_10 = powi(x[0], 3);
	I tmp_11 = powi(x[1], 3);
	I tmp_12 = powi(x[2], 3);
	I tmp_13 = powi(x[2], 2);
	I tmp_14 = 80*x[0];
	I tmp_15 = 80*x[1];
	I tmp_16 = 80*x[2];
	I tmp_17 = (R(140, 3))*x[0];
	I tmp_18 = x[1]*x[2];
	I tmp_19 = tmp_18*x[0];
	I tmp_20 = tmp_13*tmp_8;
	I tmp_21 = tmp_13*tmp_6;
	I tmp_22 = 64*tmp_21;
	I tmp_23 = tmp_20 + tmp_22;
	I tmp_24 = (R(128, 3))*x[0];
	I tmp_25 = tmp_11*tmp_24;
	I tmp_26 = tmp_12*tmp_24;
	I tmp_27 = tmp_25 + tmp_26;
	I tmp_28 = 128*tmp_7;
	I tmp_29 = tmp_18*tmp_28;
	I tmp_30 = tmp_13*x[0];
	I tmp_31 = tmp_30*x[1];
	I tmp_32 = 128*tmp_31;
	I tmp_33 = (R(128, 3))*x[1];
	I tmp_34 = tmp_10*tmp_33;
	I tmp_35 = tmp_12*tmp_33;
	I tmp_36 = tmp_29 + tmp_32 + tmp_34 + tmp_35;
	I tmp_37 = tmp_6*x[0];
	I tmp_38 = tmp_37*x[2];
	I tmp_39 = 128*tmp_38;
	I tmp_40 = (R(128, 3))*x[2];
	I tmp_41 = tmp_10*tmp_40;
	I tmp_42 = tmp_11*tmp_40;
	I tmp_43 = tmp_39 + tmp_41 + tmp_42;
	I tmp_44 = (R(128, 3))*tmp_0;
	I tmp_45 = 128*tmp_10;
	I tmp_46 = tmp_45*x[1];
	I tmp_47 = tmp_32 + tmp_46;
	I tmp_48 = 256*tmp_7;
	I tmp_49 = tmp_18*tmp_48;
	I tmp_50 = tmp_45*x[2];
	I tmp_51 = tmp_39 + tmp_49 + tmp_50;
	I tmp_52 = tmp_28*tmp_6;
	I tmp_53 = (R(208, 3))*x[0];
	I tmp_54 = -192*x[0]*x[1]*x[2];
	I tmp_55 = tmp_52 + tmp_53*x[1] + tmp_54;
	I tmp_56 = tmp_13*tmp_28;
	I tmp_57 = tmp_53*x[2] + tmp_56;
	I tmp_58 = 144*tmp_7;
	I tmp_59 = 28*x[0];
	I tmp_60 = tmp_59*x[1];
	I tmp_61 = tmp_59*x[2];
	I tmp_62 = 16*x[0];
	I tmp_63 = -tmp_6*tmp_62 + tmp_9;
	I tmp_64 = -tmp_13*tmp_62 + tmp_20;
	I tmp_65 = 32*x[0];
	I tmp_66 = -tmp_18*tmp_65;
	I tmp_67 = tmp_29 + tmp_66;
	I tmp_68 = tmp_46 + tmp_67;
	I tmp_69 = (R(16, 3))*x[0];
	I tmp_70 = tmp_69*x[1];
	I tmp_71 = 32*tmp_7;
	I tmp_72 = -tmp_71*x[1];
	I tmp_73 = tmp_34 + tmp_70 + tmp_72;
	I tmp_74 = tmp_69*x[2];
	I tmp_75 = -tmp_71*x[2];
	I tmp_76 = tmp_41 + tmp_74 + tmp_75;
	I tmp_77 = 16*x[1];
	I tmp_78 = -tmp_7*tmp_77;
	I tmp_79 = 4*x[0];
	I tmp_80 = 32*tmp_6;
	I tmp_81 = -tmp_80*x[0];
	I tmp_82 = tmp_25 + tmp_70 + tmp_81;
	I tmp_83 = (R(128, 3))*tmp_2;
	I tmp_84 = (R(16, 3))*x[1]*x[2];
	I tmp_85 = -tmp_80*x[2];
	I tmp_86 = tmp_42 + tmp_84 + tmp_85;
	I tmp_87 = 128*tmp_11;
	I tmp_88 = tmp_87*x[2];
	I tmp_89 = 144*tmp_6;
	I tmp_90 = 28*tmp_18;
	I tmp_91 = -tmp_13*tmp_77 + tmp_22;
	I tmp_92 = tmp_87*x[0];
	I tmp_93 = tmp_39 + tmp_66;
	I tmp_94 = tmp_92 + tmp_93;
	I tmp_95 = 256*tmp_38;
	I tmp_96 = tmp_88 + tmp_95;
	I tmp_97 = 128*tmp_21;
	I tmp_98 = (R(208, 3))*tmp_18 + tmp_97;
	I tmp_99 = 256*tmp_31;
	I tmp_100 = 128*tmp_12;
	I tmp_101 = tmp_100*x[0];
	I tmp_102 = (R(128, 3))*tmp_4;
	I tmp_103 = tmp_100*x[1];
	I tmp_104 = tmp_103 + tmp_29;
	I tmp_105 = 16*x[2];
	I tmp_106 = -tmp_105*tmp_7;
	I tmp_107 = -tmp_105*tmp_6;
	I tmp_108 = 144*tmp_13;
	I tmp_109 = tmp_32 + tmp_66;
	I tmp_110 = tmp_101 + tmp_109;
	I tmp_111 = 32*tmp_13;
	I tmp_112 = -tmp_111*x[0];
	I tmp_113 = tmp_112 + tmp_26 + tmp_74;
	I tmp_114 = -tmp_111*x[1];
	I tmp_115 = tmp_114 + tmp_35 + tmp_84;
	I tmp_116 = 96*x[0];
	I tmp_117 = -224*tmp_19;
	I tmp_118 = tmp_49 + tmp_95;
	I tmp_119 = tmp_52 + tmp_65*x[1];
	I tmp_120 = tmp_117 + tmp_99;
	I tmp_121 = tmp_56 + tmp_65*x[2];
	I tmp_122 = 32*tmp_18 + tmp_97;
	acc += lagVec[0] * tmp_1 - R(80, 3)*tmp_10 - R(80, 3)*tmp_11 - R(80, 3)*tmp_12 - tmp_13*tmp_14 - tmp_13*tmp_15 + (R(70, 3))*tmp_13 - tmp_14*tmp_6 - tmp_15*tmp_7 - tmp_16*tmp_6 - tmp_16*tmp_7 + tmp_17*x[1] + tmp_17*x[2] + (R(140, 3))*tmp_18 - 160*tmp_19 + tmp_23 + tmp_27 + tmp_3 + tmp_36 + tmp_43 + tmp_5 + (R(70, 3))*tmp_6 + (R(70, 3))*tmp_7 + tmp_9 - R(25, 3)*x[0] - R(25, 3)*x[1] - R(25, 3)*x[2] + 1;
	acc += lagVec[1] * tmp_1 - 16*tmp_10 + (R(22, 3))*tmp_7 - x[0];
	acc += lagVec[2] * -16*tmp_11 + tmp_3 + (R(22, 3))*tmp_6 - x[1];
	acc += lagVec[3] * -16*tmp_12 + (R(22, 3))*tmp_13 + tmp_5 - x[2];
	acc += lagVec[4] * 96*tmp_10 + 96*tmp_13*x[0] - tmp_27 - tmp_44 - tmp_47 - tmp_51 - tmp_55 - tmp_57 + 96*tmp_6*x[0] + 192*tmp_7*x[1] + 192*tmp_7*x[2] - R(208, 3)*tmp_7 + 16*x[0];
	acc += lagVec[5] * 64*tmp_0 - tmp_45 + tmp_50 - tmp_58*x[1] - tmp_58*x[2] + tmp_60 + tmp_61 + tmp_63 + tmp_64 + tmp_68 + 76*tmp_7 - 12*x[0];
	acc += lagVec[6] * (R(224, 3))*tmp_10 - tmp_44 - R(112, 3)*tmp_7 - tmp_73 - tmp_76 + (R(16, 3))*x[0];
	acc += lagVec[7] * tmp_73;
	acc += lagVec[8] * tmp_63 + tmp_78 + tmp_79*x[1];
	acc += lagVec[9] * tmp_82;
	acc += lagVec[10] * (R(224, 3))*tmp_11 - R(112, 3)*tmp_6 - tmp_82 - tmp_83 - tmp_86 + (R(16, 3))*x[1];
	acc += lagVec[11] * 64*tmp_2 + 76*tmp_6 + tmp_60 + tmp_78 - tmp_87 + tmp_88 - tmp_89*x[0] - tmp_89*x[2] + tmp_9 + tmp_90 + tmp_91 + tmp_94 - 12*x[1];
	acc += lagVec[12] * 96*tmp_11 + 96*tmp_13*x[1] - tmp_36 - tmp_55 + 192*tmp_6*x[0] + 192*tmp_6*x[2] - R(208, 3)*tmp_6 + 96*tmp_7*x[1] - tmp_83 - tmp_92 - tmp_96 - tmp_98 + 16*x[1];
	acc += lagVec[13] * -tmp_101 - tmp_102 - tmp_104 + 96*tmp_12 + 192*tmp_13*x[0] + 192*tmp_13*x[1] - R(208, 3)*tmp_13 - tmp_43 - tmp_54 - tmp_57 + 96*tmp_6*x[2] + 96*tmp_7*x[2] - tmp_98 - tmp_99 + 16*x[2];
	acc += lagVec[14] * -tmp_100 + tmp_103 + tmp_106 + tmp_107 - tmp_108*x[0] - tmp_108*x[1] + tmp_110 + 76*tmp_13 + tmp_23 + 64*tmp_4 + tmp_61 + tmp_90 - 12*x[2];
	acc += lagVec[15] * -tmp_102 - tmp_113 - tmp_115 + (R(224, 3))*tmp_12 - R(112, 3)*tmp_13 + (R(16, 3))*x[2];
	acc += lagVec[16] * tmp_76;
	acc += lagVec[17] * tmp_106 + tmp_64 + tmp_79*x[2];
	acc += lagVec[18] * tmp_113;
	acc += lagVec[19] * tmp_86;
	acc += lagVec[20] * tmp_107 + 4*tmp_18 + tmp_91;
	acc += lagVec[21] * tmp_115;
	acc += lagVec[22] * tmp_116*x[1] + tmp_117 + tmp_118 - 224*tmp_37 + tmp_47 + tmp_48*tmp_6 - 224*tmp_7*x[1] + tmp_92;
	acc += lagVec[23] * -tmp_119 + 160*tmp_6*x[0] - tmp_72 - tmp_94;
	acc += lagVec[24] * -tmp_119 - tmp_68 + 160*tmp_7*x[1] - tmp_81;
	acc += lagVec[25] * tmp_101 + tmp_116*x[2] + tmp_120 + tmp_13*tmp_48 - 224*tmp_30 + tmp_51 - 224*tmp_7*x[2];
	acc += lagVec[26] * -tmp_110 - tmp_121 + 160*tmp_13*x[0] - tmp_75;
	acc += lagVec[27] * -tmp_112 - tmp_121 - tmp_50 - tmp_67 + 160*tmp_7*x[2];
	acc += lagVec[28] * tmp_67;
	acc += lagVec[29] * tmp_109;
	acc += lagVec[30] * tmp_93;
	acc += lagVec[31] * tmp_104 + tmp_120 - 224*tmp_13*x[1] + 96*tmp_18 + 256*tmp_21 - 224*tmp_6*x[2] + tmp_96;
	acc += lagVec[32] * -tmp_103 - tmp_109 - tmp_122 + 160*tmp_13*x[1] - tmp_85;
	acc += lagVec[33] * -tmp_114 - tmp_122 + 160*tmp_6*x[2] - tmp_88 - tmp_93;
	acc += lagVec[34] * -tmp_118 - tmp_99 + 256*x[0]*x[1]*x[2];
	return acc;
}}
#undef R
#undef I