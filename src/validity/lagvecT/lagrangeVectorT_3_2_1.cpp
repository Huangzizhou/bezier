#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVectorT<3, 2, 1>(const span<const fp_t> cpFP, const span<Interval> out) {
	assert(cpFP.size() == 36);
	assert(out.size() == 36);
	std::array<Interval, 36> cp;
	for (int i = 0; i < 36; ++i) cp[i] = cpFP[i];
	I tmp_0 = -cp[0] + cp[12];
	I tmp_1 = -cp[4];
	I tmp_2 = cp[10] + tmp_1;
	I tmp_3 = -cp[2];
	I tmp_4 = cp[20] + tmp_3;
	I tmp_5 = cp[22] + tmp_1;
	I tmp_6 = -cp[8];
	I tmp_7 = -cp[2] - tmp_6;
	I tmp_8 = -cp[0] + cp[18];
	I tmp_9 = cp[14] + tmp_3;
	I tmp_10 = cp[16] + tmp_1;
	I tmp_11 = tmp_10*tmp_7 - tmp_2*tmp_9;
	I tmp_12 = -cp[6];
	I tmp_13 = -cp[0] - tmp_12;
	I tmp_14 = (R(2, 3))*cp[18];
	I tmp_15 = (R(1, 3))*cp[19];
	I tmp_16 = (R(1, 3))*cp[1];
	I tmp_17 = (R(2, 3))*cp[0] + tmp_16;
	I tmp_18 = tmp_14 + tmp_15 - tmp_17;
	I tmp_19 = -R(1, 3)*cp[5];
	I tmp_20 = -R(2, 3)*cp[4] + tmp_19;
	I tmp_21 = (R(1, 3))*cp[11];
	I tmp_22 = (R(2, 3))*cp[10] + tmp_21;
	I tmp_23 = tmp_20 + tmp_22;
	I tmp_24 = (R(2, 3))*cp[2];
	I tmp_25 = (R(1, 3))*cp[3];
	I tmp_26 = -tmp_25;
	I tmp_27 = -tmp_24 + tmp_26;
	I tmp_28 = (R(1, 3))*cp[15];
	I tmp_29 = (R(2, 3))*cp[14] + tmp_28;
	I tmp_30 = tmp_27 + tmp_29;
	I tmp_31 = (R(1, 3))*cp[17];
	I tmp_32 = (R(2, 3))*cp[16] + tmp_31;
	I tmp_33 = tmp_20 + tmp_32;
	I tmp_34 = -R(1, 3)*cp[9];
	I tmp_35 = -R(2, 3)*cp[8] + tmp_34;
	I tmp_36 = -tmp_24 - tmp_25 - tmp_35;
	I tmp_37 = -tmp_23*tmp_30 + tmp_33*tmp_36;
	I tmp_38 = (R(2, 3))*cp[12];
	I tmp_39 = (R(1, 3))*cp[13];
	I tmp_40 = -tmp_39;
	I tmp_41 = -tmp_17 + tmp_38 - tmp_40;
	I tmp_42 = (R(1, 3))*cp[21];
	I tmp_43 = (R(2, 3))*cp[20] + tmp_42;
	I tmp_44 = tmp_27 + tmp_43;
	I tmp_45 = (R(1, 3))*cp[23];
	I tmp_46 = (R(2, 3))*cp[22] + tmp_45;
	I tmp_47 = tmp_20 + tmp_46;
	I tmp_48 = -R(1, 3)*cp[7];
	I tmp_49 = -R(2, 3)*cp[6] + tmp_48;
	I tmp_50 = -tmp_17 - tmp_49;
	I tmp_51 = (R(2, 3))*cp[19];
	I tmp_52 = (R(1, 3))*cp[18];
	I tmp_53 = (R(1, 3))*cp[0];
	I tmp_54 = (R(2, 3))*cp[1] + tmp_53;
	I tmp_55 = tmp_51 + tmp_52 - tmp_54;
	I tmp_56 = -R(1, 3)*cp[4];
	I tmp_57 = -R(2, 3)*cp[5] + tmp_56;
	I tmp_58 = (R(1, 3))*cp[10];
	I tmp_59 = (R(2, 3))*cp[11] + tmp_58;
	I tmp_60 = tmp_57 + tmp_59;
	I tmp_61 = (R(2, 3))*cp[3];
	I tmp_62 = (R(1, 3))*cp[2];
	I tmp_63 = -tmp_62;
	I tmp_64 = -tmp_61 + tmp_63;
	I tmp_65 = (R(1, 3))*cp[14];
	I tmp_66 = (R(2, 3))*cp[15] + tmp_65;
	I tmp_67 = tmp_64 + tmp_66;
	I tmp_68 = (R(1, 3))*cp[16];
	I tmp_69 = (R(2, 3))*cp[17] + tmp_68;
	I tmp_70 = tmp_57 + tmp_69;
	I tmp_71 = -R(1, 3)*cp[8];
	I tmp_72 = -R(2, 3)*cp[9] + tmp_71;
	I tmp_73 = -tmp_61 - tmp_62 - tmp_72;
	I tmp_74 = -tmp_60*tmp_67 + tmp_70*tmp_73;
	I tmp_75 = (R(2, 3))*cp[13];
	I tmp_76 = (R(1, 3))*cp[12];
	I tmp_77 = -tmp_76;
	I tmp_78 = -tmp_54 + tmp_75 - tmp_77;
	I tmp_79 = (R(1, 3))*cp[20];
	I tmp_80 = (R(2, 3))*cp[21] + tmp_79;
	I tmp_81 = tmp_64 + tmp_80;
	I tmp_82 = (R(1, 3))*cp[22];
	I tmp_83 = (R(2, 3))*cp[23] + tmp_82;
	I tmp_84 = tmp_57 + tmp_83;
	I tmp_85 = -R(1, 3)*cp[6];
	I tmp_86 = -R(2, 3)*cp[7] + tmp_85;
	I tmp_87 = -tmp_54 - tmp_86;
	I tmp_88 = -cp[1];
	I tmp_89 = cp[13] + tmp_88;
	I tmp_90 = -cp[5];
	I tmp_91 = cp[11] + tmp_90;
	I tmp_92 = -cp[3];
	I tmp_93 = cp[21] + tmp_92;
	I tmp_94 = cp[23] + tmp_90;
	I tmp_95 = -cp[9];
	I tmp_96 = -cp[3] - tmp_95;
	I tmp_97 = cp[19] + tmp_88;
	I tmp_98 = cp[15] + tmp_92;
	I tmp_99 = cp[17] + tmp_90;
	I tmp_100 = -tmp_91*tmp_98 + tmp_96*tmp_99;
	I tmp_101 = -cp[7];
	I tmp_102 = -cp[1] - tmp_101;
	I tmp_103 = (R(1, 2))*cp[0] + (R(1, 2))*cp[18];
	I tmp_104 = (R(1, 2))*cp[12] + (R(1, 2))*cp[30] - tmp_103;
	I tmp_105 = -R(1, 2)*cp[22] - R(1, 2)*cp[4];
	I tmp_106 = (R(1, 2))*cp[10] + (R(1, 2))*cp[28] + tmp_105;
	I tmp_107 = (R(1, 2))*cp[20];
	I tmp_108 = (R(1, 2))*cp[2];
	I tmp_109 = (R(1, 2))*cp[26] + (R(1, 2))*cp[8] - tmp_107 - tmp_108;
	I tmp_110 = (R(1, 2))*cp[24] + (R(1, 2))*cp[6] - tmp_103;
	I tmp_111 = (R(1, 2))*cp[16] + (R(1, 2))*cp[34] + tmp_105;
	I tmp_112 = (R(1, 2))*cp[14] + (R(1, 2))*cp[32] - tmp_107 - tmp_108;
	I tmp_113 = -tmp_106*tmp_112 + tmp_109*tmp_111;
	I tmp_114 = -R(1, 3)*cp[30];
	I tmp_115 = (R(1, 6))*cp[19] + (R(1, 6))*cp[1] + tmp_52 + tmp_53;
	I tmp_116 = (R(1, 6))*cp[13] + (R(1, 6))*cp[31] - tmp_114 - tmp_115 - tmp_77;
	I tmp_117 = -R(1, 6)*cp[23] - R(1, 6)*cp[5] + tmp_56 - tmp_82;
	I tmp_118 = (R(1, 6))*cp[11] + (R(1, 3))*cp[28] + (R(1, 6))*cp[29] + tmp_117 + tmp_58;
	I tmp_119 = (R(1, 6))*cp[21];
	I tmp_120 = -R(1, 3)*cp[26];
	I tmp_121 = (R(1, 6))*cp[3];
	I tmp_122 = (R(1, 6))*cp[27] + (R(1, 6))*cp[9] - tmp_119 - tmp_120 - tmp_121 - tmp_62 - tmp_71 - tmp_79;
	I tmp_123 = -R(1, 3)*cp[24];
	I tmp_124 = (R(1, 6))*cp[25] + (R(1, 6))*cp[7] - tmp_115 - tmp_123 - tmp_85;
	I tmp_125 = (R(1, 6))*cp[17] + (R(1, 3))*cp[34] + (R(1, 6))*cp[35] + tmp_117 + tmp_68;
	I tmp_126 = (R(1, 6))*cp[15] + (R(1, 3))*cp[32] + (R(1, 6))*cp[33] - tmp_119 - tmp_121 + tmp_63 + tmp_65 - tmp_79;
	I tmp_127 = -tmp_118*tmp_126 + tmp_122*tmp_125;
	I tmp_128 = -R(1, 3)*cp[31];
	I tmp_129 = (R(1, 6))*cp[0] + (R(1, 6))*cp[18] + tmp_15 + tmp_16;
	I tmp_130 = (R(1, 6))*cp[12] + (R(1, 6))*cp[30] - tmp_128 - tmp_129 - tmp_40;
	I tmp_131 = -R(1, 6)*cp[22] - R(1, 6)*cp[4] + tmp_19 - tmp_45;
	I tmp_132 = (R(1, 6))*cp[10] + (R(1, 6))*cp[28] + (R(1, 3))*cp[29] + tmp_131 + tmp_21;
	I tmp_133 = (R(1, 6))*cp[20];
	I tmp_134 = -R(1, 3)*cp[27];
	I tmp_135 = (R(1, 6))*cp[2];
	I tmp_136 = (R(1, 6))*cp[26] + (R(1, 6))*cp[8] - tmp_133 - tmp_134 - tmp_135 - tmp_25 - tmp_34 - tmp_42;
	I tmp_137 = -R(1, 3)*cp[25];
	I tmp_138 = (R(1, 6))*cp[24] + (R(1, 6))*cp[6] - tmp_129 - tmp_137 - tmp_48;
	I tmp_139 = (R(1, 6))*cp[16] + (R(1, 6))*cp[34] + (R(1, 3))*cp[35] + tmp_131 + tmp_31;
	I tmp_140 = (R(1, 6))*cp[14] + (R(1, 6))*cp[32] + (R(1, 3))*cp[33] - tmp_133 - tmp_135 + tmp_26 + tmp_28 - tmp_42;
	I tmp_141 = -tmp_132*tmp_140 + tmp_136*tmp_139;
	I tmp_142 = (R(1, 2))*cp[19];
	I tmp_143 = (R(1, 2))*cp[1];
	I tmp_144 = (R(1, 2))*cp[13] + (R(1, 2))*cp[31] - tmp_142 - tmp_143;
	I tmp_145 = -R(1, 2)*cp[23] - R(1, 2)*cp[5];
	I tmp_146 = (R(1, 2))*cp[11] + (R(1, 2))*cp[29] + tmp_145;
	I tmp_147 = (R(1, 2))*cp[21];
	I tmp_148 = (R(1, 2))*cp[3];
	I tmp_149 = (R(1, 2))*cp[27] + (R(1, 2))*cp[9] - tmp_147 - tmp_148;
	I tmp_150 = (R(1, 2))*cp[25] + (R(1, 2))*cp[7] - tmp_142 - tmp_143;
	I tmp_151 = (R(1, 2))*cp[17] + (R(1, 2))*cp[35] + tmp_145;
	I tmp_152 = (R(1, 2))*cp[15] + (R(1, 2))*cp[33] - tmp_147 - tmp_148;
	I tmp_153 = -tmp_146*tmp_152 + tmp_149*tmp_151;
	I tmp_154 = -cp[20] + cp[26];
	I tmp_155 = -cp[34];
	I tmp_156 = -cp[22] - tmp_155;
	I tmp_157 = -cp[32];
	I tmp_158 = -cp[20] - tmp_157;
	I tmp_159 = -cp[28];
	I tmp_160 = -cp[22] - tmp_159;
	I tmp_161 = tmp_154*tmp_156 - tmp_158*tmp_160;
	I tmp_162 = -cp[18] + cp[24];
	I tmp_163 = -cp[30];
	I tmp_164 = -cp[18] - tmp_163;
	I tmp_165 = (R(2, 3))*cp[26] - tmp_134 - tmp_43;
	I tmp_166 = -R(2, 3)*cp[34] - R(1, 3)*cp[35];
	I tmp_167 = -tmp_166 - tmp_46;
	I tmp_168 = -R(2, 3)*cp[32] - R(1, 3)*cp[33];
	I tmp_169 = -tmp_168 - tmp_43;
	I tmp_170 = -R(2, 3)*cp[28] - R(1, 3)*cp[29];
	I tmp_171 = -tmp_170 - tmp_46;
	I tmp_172 = tmp_165*tmp_167 - tmp_169*tmp_171;
	I tmp_173 = tmp_14 + tmp_15;
	I tmp_174 = -R(2, 3)*cp[30] + tmp_128;
	I tmp_175 = -tmp_173 - tmp_174;
	I tmp_176 = (R(2, 3))*cp[24] - tmp_137 - tmp_173;
	I tmp_177 = (R(2, 3))*cp[27] - tmp_120 - tmp_80;
	I tmp_178 = -R(1, 3)*cp[34] - R(2, 3)*cp[35];
	I tmp_179 = -tmp_178 - tmp_83;
	I tmp_180 = -R(1, 3)*cp[32] - R(2, 3)*cp[33];
	I tmp_181 = -tmp_180 - tmp_80;
	I tmp_182 = -R(1, 3)*cp[28] - R(2, 3)*cp[29];
	I tmp_183 = -tmp_182 - tmp_83;
	I tmp_184 = tmp_177*tmp_179 - tmp_181*tmp_183;
	I tmp_185 = tmp_51 + tmp_52;
	I tmp_186 = -R(2, 3)*cp[31] + tmp_114;
	I tmp_187 = -tmp_185 - tmp_186;
	I tmp_188 = (R(2, 3))*cp[25] - tmp_123 - tmp_185;
	I tmp_189 = -cp[19] + cp[25];
	I tmp_190 = -cp[33];
	I tmp_191 = -cp[21] - tmp_190;
	I tmp_192 = -cp[35];
	I tmp_193 = -cp[23] - tmp_192;
	I tmp_194 = -cp[31];
	I tmp_195 = -cp[19] - tmp_194;
	I tmp_196 = -cp[21] + cp[27];
	I tmp_197 = -cp[29];
	I tmp_198 = -cp[23] - tmp_197;
	I tmp_199 = -tmp_191*tmp_198 + tmp_193*tmp_196;
	I tmp_200 = -cp[14] - tmp_157;
	I tmp_201 = -cp[16] - tmp_155;
	I tmp_202 = -cp[12] - tmp_163;
	I tmp_203 = -tmp_168 - tmp_29;
	I tmp_204 = -tmp_166 - tmp_32;
	I tmp_205 = -tmp_174 - tmp_38 - tmp_39;
	I tmp_206 = -tmp_180 - tmp_66;
	I tmp_207 = -tmp_178 - tmp_69;
	I tmp_208 = -tmp_186 - tmp_75 - tmp_76;
	I tmp_209 = -cp[13] - tmp_194;
	I tmp_210 = -cp[15] - tmp_190;
	I tmp_211 = -cp[17] - tmp_192;
	I tmp_212 = -cp[10] - tmp_159;
	I tmp_213 = cp[26] + tmp_6;
	I tmp_214 = cp[24] + tmp_12;
	I tmp_215 = -tmp_170 - tmp_22;
	I tmp_216 = (R(2, 3))*cp[26] + (R(1, 3))*cp[27] + tmp_35;
	I tmp_217 = (R(2, 3))*cp[24] + (R(1, 3))*cp[25] + tmp_49;
	I tmp_218 = -tmp_182 - tmp_59;
	I tmp_219 = (R(1, 3))*cp[26] + (R(2, 3))*cp[27] + tmp_72;
	I tmp_220 = (R(1, 3))*cp[24] + (R(2, 3))*cp[25] + tmp_86;
	I tmp_221 = -cp[11] - tmp_197;
	I tmp_222 = cp[27] + tmp_95;
	I tmp_223 = cp[25] + tmp_101;
	out[0] = tmp_0*(tmp_2*tmp_4 - tmp_5*tmp_7) + tmp_11*tmp_8 + tmp_13*(-tmp_10*tmp_4 + tmp_5*tmp_9);
	out[1] = tmp_18*tmp_37 + tmp_41*(tmp_23*tmp_44 - tmp_36*tmp_47) + tmp_50*(tmp_30*tmp_47 - tmp_33*tmp_44);
	out[2] = tmp_55*tmp_74 + tmp_78*(tmp_60*tmp_81 - tmp_73*tmp_84) + tmp_87*(tmp_67*tmp_84 - tmp_70*tmp_81);
	out[3] = tmp_100*tmp_97 + tmp_102*(-tmp_93*tmp_99 + tmp_94*tmp_98) + tmp_89*(tmp_91*tmp_93 - tmp_94*tmp_96);
	out[4] = tmp_104*(tmp_106*tmp_4 - tmp_109*tmp_5) + tmp_110*(-tmp_111*tmp_4 + tmp_112*tmp_5) + tmp_113*tmp_8;
	out[5] = tmp_116*(tmp_118*tmp_44 - tmp_122*tmp_47) + tmp_124*(-tmp_125*tmp_44 + tmp_126*tmp_47) + tmp_127*tmp_18;
	out[6] = tmp_130*(tmp_132*tmp_81 - tmp_136*tmp_84) + tmp_138*(-tmp_139*tmp_81 + tmp_140*tmp_84) + tmp_141*tmp_55;
	out[7] = tmp_144*(tmp_146*tmp_93 - tmp_149*tmp_94) + tmp_150*(-tmp_151*tmp_93 + tmp_152*tmp_94) + tmp_153*tmp_97;
	out[8] = tmp_161*tmp_8 + tmp_162*(-tmp_156*tmp_4 + tmp_158*tmp_5) + tmp_164*(-tmp_154*tmp_5 + tmp_160*tmp_4);
	out[9] = tmp_172*tmp_18 + tmp_175*(-tmp_165*tmp_47 + tmp_171*tmp_44) + tmp_176*(-tmp_167*tmp_44 + tmp_169*tmp_47);
	out[10] = tmp_184*tmp_55 + tmp_187*(-tmp_177*tmp_84 + tmp_183*tmp_81) + tmp_188*(-tmp_179*tmp_81 + tmp_181*tmp_84);
	out[11] = tmp_189*(tmp_191*tmp_94 - tmp_193*tmp_93) + tmp_195*(-tmp_196*tmp_94 + tmp_198*tmp_93) + tmp_199*tmp_97;
	out[12] = tmp_0*(tmp_2*tmp_200 - tmp_201*tmp_7) + tmp_11*tmp_202 + tmp_13*(-tmp_10*tmp_200 + tmp_201*tmp_9);
	out[13] = tmp_205*tmp_37 + tmp_41*(tmp_203*tmp_23 - tmp_204*tmp_36) + tmp_50*(-tmp_203*tmp_33 + tmp_204*tmp_30);
	out[14] = tmp_208*tmp_74 + tmp_78*(tmp_206*tmp_60 - tmp_207*tmp_73) + tmp_87*(-tmp_206*tmp_70 + tmp_207*tmp_67);
	out[15] = tmp_100*tmp_209 + tmp_102*(-tmp_210*tmp_99 + tmp_211*tmp_98) + tmp_89*(tmp_210*tmp_91 - tmp_211*tmp_96);
	out[16] = tmp_104*(tmp_106*tmp_200 - tmp_109*tmp_201) + tmp_110*(-tmp_111*tmp_200 + tmp_112*tmp_201) + tmp_113*tmp_202;
	out[17] = tmp_116*(tmp_118*tmp_203 - tmp_122*tmp_204) + tmp_124*(-tmp_125*tmp_203 + tmp_126*tmp_204) + tmp_127*tmp_205;
	out[18] = tmp_130*(tmp_132*tmp_206 - tmp_136*tmp_207) + tmp_138*(-tmp_139*tmp_206 + tmp_140*tmp_207) + tmp_141*tmp_208;
	out[19] = tmp_144*(tmp_146*tmp_210 - tmp_149*tmp_211) + tmp_150*(-tmp_151*tmp_210 + tmp_152*tmp_211) + tmp_153*tmp_209;
	out[20] = tmp_161*tmp_202 + tmp_162*(-tmp_156*tmp_200 + tmp_158*tmp_201) + tmp_164*(-tmp_154*tmp_201 + tmp_160*tmp_200);
	out[21] = tmp_172*tmp_205 + tmp_175*(-tmp_165*tmp_204 + tmp_171*tmp_203) + tmp_176*(-tmp_167*tmp_203 + tmp_169*tmp_204);
	out[22] = tmp_184*tmp_208 + tmp_187*(-tmp_177*tmp_207 + tmp_183*tmp_206) + tmp_188*(-tmp_179*tmp_206 + tmp_181*tmp_207);
	out[23] = tmp_189*(tmp_191*tmp_211 - tmp_193*tmp_210) + tmp_195*(-tmp_196*tmp_211 + tmp_198*tmp_210) + tmp_199*tmp_209;
	out[24] = tmp_0*(tmp_2*tmp_213 - tmp_212*tmp_7) + tmp_11*tmp_214 + tmp_13*(-tmp_10*tmp_213 + tmp_212*tmp_9);
	out[25] = tmp_217*tmp_37 + tmp_41*(-tmp_215*tmp_36 + tmp_216*tmp_23) + tmp_50*(tmp_215*tmp_30 - tmp_216*tmp_33);
	out[26] = tmp_220*tmp_74 + tmp_78*(-tmp_218*tmp_73 + tmp_219*tmp_60) + tmp_87*(tmp_218*tmp_67 - tmp_219*tmp_70);
	out[27] = tmp_100*tmp_223 + tmp_102*(tmp_221*tmp_98 - tmp_222*tmp_99) + tmp_89*(-tmp_221*tmp_96 + tmp_222*tmp_91);
	out[28] = tmp_104*(tmp_106*tmp_213 - tmp_109*tmp_212) + tmp_110*(-tmp_111*tmp_213 + tmp_112*tmp_212) + tmp_113*tmp_214;
	out[29] = tmp_116*(tmp_118*tmp_216 - tmp_122*tmp_215) + tmp_124*(-tmp_125*tmp_216 + tmp_126*tmp_215) + tmp_127*tmp_217;
	out[30] = tmp_130*(tmp_132*tmp_219 - tmp_136*tmp_218) + tmp_138*(-tmp_139*tmp_219 + tmp_140*tmp_218) + tmp_141*tmp_220;
	out[31] = tmp_144*(tmp_146*tmp_222 - tmp_149*tmp_221) + tmp_150*(-tmp_151*tmp_222 + tmp_152*tmp_221) + tmp_153*tmp_223;
	out[32] = tmp_161*tmp_214 + tmp_162*(-tmp_156*tmp_213 + tmp_158*tmp_212) + tmp_164*(-tmp_154*tmp_212 + tmp_160*tmp_213);
	out[33] = tmp_172*tmp_217 + tmp_175*(-tmp_165*tmp_215 + tmp_171*tmp_216) + tmp_176*(-tmp_167*tmp_216 + tmp_169*tmp_215);
	out[34] = tmp_184*tmp_220 + tmp_187*(-tmp_177*tmp_218 + tmp_183*tmp_219) + tmp_188*(-tmp_179*tmp_219 + tmp_181*tmp_218);
	out[35] = tmp_189*(tmp_191*tmp_221 - tmp_193*tmp_222) + tmp_195*(-tmp_196*tmp_221 + tmp_198*tmp_222) + tmp_199*tmp_223;
}
}
#undef R
#undef I