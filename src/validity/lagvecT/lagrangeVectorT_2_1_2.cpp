#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVectorT<2, 1, 2>(const std::span<const fp_t> cpFP, const std::span<Interval> out) {
	assert(cpFP.size() == 36);
	assert(out.size() == 48);
	std::array<Interval, 36> cp;
	for (uint i = 0; i < 36; ++i) cp[i] = cpFP[i];
	I tmp_0 = 3*cp[0];
	I tmp_1 = -4*cp[28];
	I tmp_2 = -4*cp[18];
	I tmp_3 = 3*cp[2];
	I tmp_4 = -4*cp[16];
	I tmp_5 = -4*cp[30];
	I tmp_6 = (R(3, 2))*cp[0] + (R(3, 2))*cp[1];
	I tmp_7 = -2*cp[28] - 2*cp[29];
	I tmp_8 = (R(1, 2))*cp[12] + (R(1, 2))*cp[13];
	I tmp_9 = (R(3, 2))*cp[2] + (R(3, 2))*cp[3];
	I tmp_10 = -2*cp[18] - 2*cp[19];
	I tmp_11 = (R(1, 2))*cp[6] + (R(1, 2))*cp[7];
	I tmp_12 = -2*cp[16] - 2*cp[17];
	I tmp_13 = (R(1, 2))*cp[4] + (R(1, 2))*cp[5];
	I tmp_14 = -2*cp[30] - 2*cp[31];
	I tmp_15 = (R(1, 2))*cp[14] + (R(1, 2))*cp[15];
	I tmp_16 = 3*cp[1];
	I tmp_17 = -4*cp[29];
	I tmp_18 = -4*cp[19];
	I tmp_19 = 3*cp[3];
	I tmp_20 = -4*cp[31];
	I tmp_21 = -4*cp[17];
	I tmp_22 = -R(5, 3)*cp[0];
	I tmp_23 = (R(1, 3))*cp[12];
	I tmp_24 = (R(4, 3))*cp[28];
	I tmp_25 = tmp_23 + tmp_24;
	I tmp_26 = -R(32, 9)*cp[34];
	I tmp_27 = (R(8, 9))*cp[22];
	I tmp_28 = (R(8, 3))*cp[30] + tmp_26 + tmp_27;
	I tmp_29 = (R(1, 9))*cp[10];
	I tmp_30 = (R(2, 3))*cp[2] - tmp_29;
	I tmp_31 = (R(1, 3))*cp[14];
	I tmp_32 = (R(2, 9))*cp[6] - tmp_31;
	I tmp_33 = (R(8, 9))*cp[18];
	I tmp_34 = (R(4, 9))*cp[26];
	I tmp_35 = -tmp_33 + tmp_34;
	I tmp_36 = -R(5, 3)*cp[2];
	I tmp_37 = (R(4, 3))*cp[30];
	I tmp_38 = tmp_31 + tmp_37;
	I tmp_39 = -R(32, 9)*cp[32];
	I tmp_40 = (R(8, 9))*cp[20];
	I tmp_41 = (R(8, 3))*cp[28] + tmp_39 + tmp_40;
	I tmp_42 = (R(1, 9))*cp[8];
	I tmp_43 = (R(2, 3))*cp[0] - tmp_42;
	I tmp_44 = (R(2, 9))*cp[4] - tmp_23;
	I tmp_45 = (R(8, 9))*cp[16];
	I tmp_46 = (R(4, 9))*cp[24];
	I tmp_47 = -tmp_45 + tmp_46;
	I tmp_48 = (R(2, 3))*cp[28] + (R(2, 3))*cp[29];
	I tmp_49 = -R(5, 6)*cp[0] - R(5, 6)*cp[1];
	I tmp_50 = (R(1, 6))*cp[12];
	I tmp_51 = (R(1, 6))*cp[13];
	I tmp_52 = tmp_50 + tmp_51;
	I tmp_53 = (R(1, 3))*cp[2];
	I tmp_54 = tmp_37 + tmp_53;
	I tmp_55 = (R(4, 3))*cp[31];
	I tmp_56 = (R(1, 3))*cp[3];
	I tmp_57 = tmp_55 + tmp_56;
	I tmp_58 = (R(4, 9))*cp[22];
	I tmp_59 = (R(4, 9))*cp[23];
	I tmp_60 = -R(16, 9)*cp[34] - R(16, 9)*cp[35];
	I tmp_61 = tmp_58 + tmp_59 + tmp_60;
	I tmp_62 = -R(1, 18)*cp[10] - R(1, 18)*cp[11];
	I tmp_63 = (R(1, 6))*cp[14];
	I tmp_64 = (R(1, 6))*cp[15];
	I tmp_65 = (R(1, 9))*cp[6];
	I tmp_66 = (R(1, 9))*cp[7];
	I tmp_67 = -tmp_63 - tmp_64 + tmp_65 + tmp_66;
	I tmp_68 = (R(4, 9))*cp[18];
	I tmp_69 = (R(4, 9))*cp[19];
	I tmp_70 = (R(2, 9))*cp[26] + (R(2, 9))*cp[27] - tmp_68 - tmp_69;
	I tmp_71 = (R(2, 3))*cp[30] + (R(2, 3))*cp[31];
	I tmp_72 = -R(5, 6)*cp[2] - R(5, 6)*cp[3];
	I tmp_73 = tmp_63 + tmp_64;
	I tmp_74 = (R(1, 3))*cp[0];
	I tmp_75 = tmp_24 + tmp_74;
	I tmp_76 = (R(4, 3))*cp[29];
	I tmp_77 = (R(1, 3))*cp[1];
	I tmp_78 = tmp_76 + tmp_77;
	I tmp_79 = (R(4, 9))*cp[20];
	I tmp_80 = (R(4, 9))*cp[21];
	I tmp_81 = -R(16, 9)*cp[32] - R(16, 9)*cp[33];
	I tmp_82 = tmp_79 + tmp_80 + tmp_81;
	I tmp_83 = -R(1, 18)*cp[8] - R(1, 18)*cp[9];
	I tmp_84 = (R(1, 9))*cp[4];
	I tmp_85 = (R(1, 9))*cp[5];
	I tmp_86 = -tmp_50 - tmp_51 + tmp_84 + tmp_85;
	I tmp_87 = (R(4, 9))*cp[16];
	I tmp_88 = (R(4, 9))*cp[17];
	I tmp_89 = (R(2, 9))*cp[24] + (R(2, 9))*cp[25] - tmp_87 - tmp_88;
	I tmp_90 = -R(5, 3)*cp[1];
	I tmp_91 = (R(1, 3))*cp[13];
	I tmp_92 = tmp_76 + tmp_91;
	I tmp_93 = -R(32, 9)*cp[35];
	I tmp_94 = (R(8, 9))*cp[23];
	I tmp_95 = (R(8, 3))*cp[31] + tmp_93 + tmp_94;
	I tmp_96 = (R(1, 9))*cp[11];
	I tmp_97 = (R(2, 3))*cp[3] - tmp_96;
	I tmp_98 = (R(1, 3))*cp[15];
	I tmp_99 = (R(2, 9))*cp[7] - tmp_98;
	I tmp_100 = (R(8, 9))*cp[19];
	I tmp_101 = (R(4, 9))*cp[27];
	I tmp_102 = -tmp_100 + tmp_101;
	I tmp_103 = -R(5, 3)*cp[3];
	I tmp_104 = tmp_55 + tmp_98;
	I tmp_105 = -R(32, 9)*cp[33];
	I tmp_106 = (R(8, 9))*cp[21];
	I tmp_107 = (R(8, 3))*cp[29] + tmp_105 + tmp_106;
	I tmp_108 = (R(1, 9))*cp[9];
	I tmp_109 = (R(2, 3))*cp[1] - tmp_108;
	I tmp_110 = (R(2, 9))*cp[5] - tmp_91;
	I tmp_111 = (R(8, 9))*cp[17];
	I tmp_112 = (R(4, 9))*cp[25];
	I tmp_113 = -tmp_111 + tmp_112;
	I tmp_114 = -R(5, 3)*cp[12];
	I tmp_115 = (R(2, 3))*cp[14] - tmp_65;
	I tmp_116 = (R(2, 9))*cp[10] - tmp_53;
	I tmp_117 = (R(8, 9))*cp[26];
	I tmp_118 = -tmp_117 + tmp_68;
	I tmp_119 = -R(5, 3)*cp[14];
	I tmp_120 = (R(2, 3))*cp[12] - tmp_84;
	I tmp_121 = (R(2, 9))*cp[8] - tmp_74;
	I tmp_122 = (R(8, 9))*cp[24];
	I tmp_123 = -tmp_122 + tmp_87;
	I tmp_124 = -R(5, 6)*cp[12] - R(5, 6)*cp[13];
	I tmp_125 = (R(1, 6))*cp[0];
	I tmp_126 = (R(1, 6))*cp[1];
	I tmp_127 = tmp_125 + tmp_126;
	I tmp_128 = -R(1, 18)*cp[6] - R(1, 18)*cp[7];
	I tmp_129 = (R(1, 6))*cp[2];
	I tmp_130 = (R(1, 6))*cp[3];
	I tmp_131 = -tmp_129 - tmp_130 + tmp_29 + tmp_96;
	I tmp_132 = (R(2, 9))*cp[18] + (R(2, 9))*cp[19] - tmp_101 - tmp_34;
	I tmp_133 = -R(5, 6)*cp[14] - R(5, 6)*cp[15];
	I tmp_134 = tmp_129 + tmp_130;
	I tmp_135 = -R(1, 18)*cp[4] - R(1, 18)*cp[5];
	I tmp_136 = tmp_108 - tmp_125 - tmp_126 + tmp_42;
	I tmp_137 = (R(2, 9))*cp[16] + (R(2, 9))*cp[17] - tmp_112 - tmp_46;
	I tmp_138 = -R(5, 3)*cp[13];
	I tmp_139 = (R(2, 3))*cp[15] - tmp_66;
	I tmp_140 = (R(2, 9))*cp[11] - tmp_56;
	I tmp_141 = (R(8, 9))*cp[27];
	I tmp_142 = -tmp_141 + tmp_69;
	I tmp_143 = -R(5, 3)*cp[15];
	I tmp_144 = (R(2, 3))*cp[13] - tmp_85;
	I tmp_145 = (R(2, 9))*cp[9] - tmp_77;
	I tmp_146 = (R(8, 9))*cp[25];
	I tmp_147 = -tmp_146 + tmp_88;
	I tmp_148 = 3*cp[12];
	I tmp_149 = 3*cp[14];
	I tmp_150 = -4*cp[26];
	I tmp_151 = -4*cp[24];
	I tmp_152 = (R(3, 2))*cp[12] + (R(3, 2))*cp[13];
	I tmp_153 = (R(1, 2))*cp[0] + (R(1, 2))*cp[1];
	I tmp_154 = (R(3, 2))*cp[14] + (R(3, 2))*cp[15];
	I tmp_155 = (R(1, 2))*cp[10] + (R(1, 2))*cp[11];
	I tmp_156 = -2*cp[26] - 2*cp[27];
	I tmp_157 = (R(1, 2))*cp[8] + (R(1, 2))*cp[9];
	I tmp_158 = -2*cp[24] - 2*cp[25];
	I tmp_159 = (R(1, 2))*cp[2] + (R(1, 2))*cp[3];
	I tmp_160 = 3*cp[13];
	I tmp_161 = 3*cp[15];
	I tmp_162 = -4*cp[27];
	I tmp_163 = -4*cp[25];
	I tmp_164 = (R(1, 3))*cp[4];
	I tmp_165 = (R(4, 3))*cp[16];
	I tmp_166 = tmp_164 + tmp_165;
	I tmp_167 = (R(8, 9))*cp[30];
	I tmp_168 = -tmp_167 + tmp_26 + tmp_58;
	I tmp_169 = (R(8, 3))*cp[18] + tmp_117;
	I tmp_170 = (R(1, 3))*cp[6];
	I tmp_171 = (R(2, 9))*cp[14] - tmp_170;
	I tmp_172 = (R(4, 3))*cp[18];
	I tmp_173 = tmp_170 + tmp_172;
	I tmp_174 = (R(8, 9))*cp[28];
	I tmp_175 = -tmp_174 + tmp_39 + tmp_79;
	I tmp_176 = (R(8, 3))*cp[16] + tmp_122;
	I tmp_177 = (R(2, 9))*cp[12] - tmp_164;
	I tmp_178 = (R(2, 3))*cp[16] + (R(2, 3))*cp[17];
	I tmp_179 = (R(1, 6))*cp[4];
	I tmp_180 = (R(1, 6))*cp[5];
	I tmp_181 = tmp_179 + tmp_180;
	I tmp_182 = tmp_172 + tmp_53;
	I tmp_183 = (R(4, 3))*cp[19];
	I tmp_184 = tmp_183 + tmp_56;
	I tmp_185 = tmp_101 + tmp_34 + tmp_60;
	I tmp_186 = (R(4, 9))*cp[30];
	I tmp_187 = (R(4, 9))*cp[31];
	I tmp_188 = (R(2, 9))*cp[22] + (R(2, 9))*cp[23] - tmp_186 - tmp_187;
	I tmp_189 = (R(1, 6))*cp[6];
	I tmp_190 = (R(1, 6))*cp[7];
	I tmp_191 = (R(1, 9))*cp[14];
	I tmp_192 = (R(1, 9))*cp[15];
	I tmp_193 = -tmp_189 - tmp_190 + tmp_191 + tmp_192;
	I tmp_194 = (R(2, 3))*cp[18] + (R(2, 3))*cp[19];
	I tmp_195 = tmp_189 + tmp_190;
	I tmp_196 = tmp_165 + tmp_74;
	I tmp_197 = (R(4, 3))*cp[17];
	I tmp_198 = tmp_197 + tmp_77;
	I tmp_199 = tmp_112 + tmp_46 + tmp_81;
	I tmp_200 = (R(4, 9))*cp[28];
	I tmp_201 = (R(4, 9))*cp[29];
	I tmp_202 = (R(2, 9))*cp[20] + (R(2, 9))*cp[21] - tmp_200 - tmp_201;
	I tmp_203 = (R(1, 9))*cp[12];
	I tmp_204 = (R(1, 9))*cp[13];
	I tmp_205 = -tmp_179 - tmp_180 + tmp_203 + tmp_204;
	I tmp_206 = (R(1, 3))*cp[5];
	I tmp_207 = tmp_197 + tmp_206;
	I tmp_208 = (R(8, 9))*cp[31];
	I tmp_209 = -tmp_208 + tmp_59 + tmp_93;
	I tmp_210 = (R(8, 3))*cp[19] + tmp_141;
	I tmp_211 = (R(1, 3))*cp[7];
	I tmp_212 = (R(2, 9))*cp[15] - tmp_211;
	I tmp_213 = tmp_183 + tmp_211;
	I tmp_214 = (R(8, 9))*cp[29];
	I tmp_215 = tmp_105 - tmp_214 + tmp_80;
	I tmp_216 = (R(8, 3))*cp[17] + tmp_146;
	I tmp_217 = (R(2, 9))*cp[13] - tmp_206;
	I tmp_218 = (R(1, 27))*cp[8];
	I tmp_219 = -R(10, 27)*cp[0] - tmp_218;
	I tmp_220 = (R(4, 27))*cp[20];
	I tmp_221 = (R(8, 27))*cp[28];
	I tmp_222 = -tmp_220 + tmp_221;
	I tmp_223 = (R(32, 27))*cp[32];
	I tmp_224 = (R(8, 27))*cp[24] + tmp_223;
	I tmp_225 = -R(40, 27)*cp[16] + tmp_224;
	I tmp_226 = (R(5, 27))*cp[4];
	I tmp_227 = (R(2, 27))*cp[12] + tmp_226;
	I tmp_228 = (R(1, 27))*cp[10];
	I tmp_229 = -R(10, 27)*cp[2] - tmp_228;
	I tmp_230 = (R(8, 27))*cp[22];
	I tmp_231 = -R(40, 27)*cp[30] + tmp_230;
	I tmp_232 = (R(4, 27))*cp[26];
	I tmp_233 = (R(32, 27))*cp[34];
	I tmp_234 = (R(8, 27))*cp[18] + tmp_233;
	I tmp_235 = -tmp_232 + tmp_234;
	I tmp_236 = (R(5, 27))*cp[14];
	I tmp_237 = (R(2, 27))*cp[6] + tmp_236;
	I tmp_238 = (R(8, 27))*cp[20];
	I tmp_239 = -R(40, 27)*cp[28] + tmp_238;
	I tmp_240 = (R(4, 27))*cp[24];
	I tmp_241 = (R(8, 27))*cp[16] + tmp_223;
	I tmp_242 = -tmp_240 + tmp_241;
	I tmp_243 = (R(5, 27))*cp[12];
	I tmp_244 = (R(2, 27))*cp[4] + tmp_243;
	I tmp_245 = (R(4, 27))*cp[22];
	I tmp_246 = (R(8, 27))*cp[30];
	I tmp_247 = -tmp_245 + tmp_246;
	I tmp_248 = (R(8, 27))*cp[26] + tmp_233;
	I tmp_249 = -R(40, 27)*cp[18] + tmp_248;
	I tmp_250 = (R(5, 27))*cp[6];
	I tmp_251 = (R(2, 27))*cp[14] + tmp_250;
	I tmp_252 = (R(5, 27))*cp[0];
	I tmp_253 = (R(5, 27))*cp[1];
	I tmp_254 = -R(1, 54)*cp[8] - R(1, 54)*cp[9] - tmp_252 - tmp_253;
	I tmp_255 = (R(4, 27))*cp[28];
	I tmp_256 = (R(4, 27))*cp[29];
	I tmp_257 = tmp_255 + tmp_256;
	I tmp_258 = -R(2, 27)*cp[20] - R(2, 27)*cp[21] + tmp_257;
	I tmp_259 = (R(4, 27))*cp[25];
	I tmp_260 = (R(16, 27))*cp[32] + (R(16, 27))*cp[33];
	I tmp_261 = tmp_240 + tmp_259 + tmp_260;
	I tmp_262 = -R(20, 27)*cp[16] - R(20, 27)*cp[17] + tmp_261;
	I tmp_263 = (R(1, 27))*cp[12];
	I tmp_264 = (R(1, 27))*cp[13];
	I tmp_265 = (R(5, 54))*cp[4] + (R(5, 54))*cp[5] + tmp_263 + tmp_264;
	I tmp_266 = (R(5, 27))*cp[2];
	I tmp_267 = (R(5, 27))*cp[3];
	I tmp_268 = -R(1, 54)*cp[10] - R(1, 54)*cp[11] - tmp_266 - tmp_267;
	I tmp_269 = (R(4, 27))*cp[23];
	I tmp_270 = tmp_245 + tmp_269;
	I tmp_271 = -R(20, 27)*cp[30] - R(20, 27)*cp[31] + tmp_270;
	I tmp_272 = (R(4, 27))*cp[18];
	I tmp_273 = (R(4, 27))*cp[19];
	I tmp_274 = (R(16, 27))*cp[34] + (R(16, 27))*cp[35];
	I tmp_275 = tmp_272 + tmp_273 + tmp_274;
	I tmp_276 = -R(2, 27)*cp[26] - R(2, 27)*cp[27] + tmp_275;
	I tmp_277 = (R(1, 27))*cp[6];
	I tmp_278 = (R(1, 27))*cp[7];
	I tmp_279 = (R(5, 54))*cp[14] + (R(5, 54))*cp[15] + tmp_277 + tmp_278;
	I tmp_280 = (R(4, 27))*cp[21];
	I tmp_281 = tmp_220 + tmp_280;
	I tmp_282 = -R(20, 27)*cp[28] - R(20, 27)*cp[29] + tmp_281;
	I tmp_283 = (R(4, 27))*cp[16];
	I tmp_284 = (R(4, 27))*cp[17];
	I tmp_285 = tmp_260 + tmp_283 + tmp_284;
	I tmp_286 = -R(2, 27)*cp[24] - R(2, 27)*cp[25] + tmp_285;
	I tmp_287 = (R(1, 27))*cp[4];
	I tmp_288 = (R(1, 27))*cp[5];
	I tmp_289 = (R(5, 54))*cp[12] + (R(5, 54))*cp[13] + tmp_287 + tmp_288;
	I tmp_290 = (R(4, 27))*cp[30];
	I tmp_291 = (R(4, 27))*cp[31];
	I tmp_292 = tmp_290 + tmp_291;
	I tmp_293 = -R(2, 27)*cp[22] - R(2, 27)*cp[23] + tmp_292;
	I tmp_294 = (R(4, 27))*cp[27];
	I tmp_295 = tmp_232 + tmp_274 + tmp_294;
	I tmp_296 = -R(20, 27)*cp[18] - R(20, 27)*cp[19] + tmp_295;
	I tmp_297 = (R(1, 27))*cp[14];
	I tmp_298 = (R(1, 27))*cp[15];
	I tmp_299 = (R(5, 54))*cp[6] + (R(5, 54))*cp[7] + tmp_297 + tmp_298;
	I tmp_300 = (R(1, 27))*cp[11];
	I tmp_301 = -R(10, 27)*cp[3] - tmp_300;
	I tmp_302 = (R(8, 27))*cp[31];
	I tmp_303 = -tmp_269 + tmp_302;
	I tmp_304 = (R(32, 27))*cp[35];
	I tmp_305 = (R(8, 27))*cp[27] + tmp_304;
	I tmp_306 = -R(40, 27)*cp[19] + tmp_305;
	I tmp_307 = (R(5, 27))*cp[7];
	I tmp_308 = (R(2, 27))*cp[15] + tmp_307;
	I tmp_309 = (R(1, 27))*cp[9];
	I tmp_310 = -R(10, 27)*cp[1] - tmp_309;
	I tmp_311 = (R(8, 27))*cp[21];
	I tmp_312 = -R(40, 27)*cp[29] + tmp_311;
	I tmp_313 = (R(32, 27))*cp[33];
	I tmp_314 = (R(8, 27))*cp[17] + tmp_313;
	I tmp_315 = -tmp_259 + tmp_314;
	I tmp_316 = (R(5, 27))*cp[13];
	I tmp_317 = (R(2, 27))*cp[5] + tmp_316;
	I tmp_318 = (R(8, 27))*cp[23];
	I tmp_319 = -R(40, 27)*cp[31] + tmp_318;
	I tmp_320 = (R(8, 27))*cp[19] + tmp_304;
	I tmp_321 = -tmp_294 + tmp_320;
	I tmp_322 = (R(5, 27))*cp[15];
	I tmp_323 = (R(2, 27))*cp[7] + tmp_322;
	I tmp_324 = (R(8, 27))*cp[29];
	I tmp_325 = -tmp_280 + tmp_324;
	I tmp_326 = (R(8, 27))*cp[25] + tmp_313;
	I tmp_327 = -R(40, 27)*cp[17] + tmp_326;
	I tmp_328 = (R(5, 27))*cp[5];
	I tmp_329 = (R(2, 27))*cp[13] + tmp_328;
	I tmp_330 = -R(10, 27)*cp[12] - tmp_287;
	I tmp_331 = (R(5, 27))*cp[8];
	I tmp_332 = (R(2, 27))*cp[0] + tmp_331;
	I tmp_333 = -R(40, 27)*cp[24] + tmp_241;
	I tmp_334 = -R(10, 27)*cp[14] - tmp_277;
	I tmp_335 = (R(2, 27))*cp[10] + tmp_266;
	I tmp_336 = tmp_248 - tmp_272;
	I tmp_337 = (R(2, 27))*cp[8] + tmp_252;
	I tmp_338 = tmp_224 - tmp_283;
	I tmp_339 = (R(5, 27))*cp[10];
	I tmp_340 = (R(2, 27))*cp[2] + tmp_339;
	I tmp_341 = -R(40, 27)*cp[26] + tmp_234;
	I tmp_342 = -R(1, 54)*cp[4] - R(1, 54)*cp[5] - tmp_243 - tmp_316;
	I tmp_343 = -R(20, 27)*cp[24] - R(20, 27)*cp[25] + tmp_285;
	I tmp_344 = (R(1, 27))*cp[0];
	I tmp_345 = (R(1, 27))*cp[1];
	I tmp_346 = (R(5, 54))*cp[8] + (R(5, 54))*cp[9] + tmp_344 + tmp_345;
	I tmp_347 = -R(1, 54)*cp[6] - R(1, 54)*cp[7] - tmp_236 - tmp_322;
	I tmp_348 = -R(2, 27)*cp[18] - R(2, 27)*cp[19] + tmp_295;
	I tmp_349 = (R(5, 54))*cp[2] + (R(5, 54))*cp[3] + tmp_228 + tmp_300;
	I tmp_350 = -R(2, 27)*cp[16] - R(2, 27)*cp[17] + tmp_261;
	I tmp_351 = (R(5, 54))*cp[0] + (R(5, 54))*cp[1] + tmp_218 + tmp_309;
	I tmp_352 = -R(20, 27)*cp[26] - R(20, 27)*cp[27] + tmp_275;
	I tmp_353 = (R(1, 27))*cp[2];
	I tmp_354 = (R(1, 27))*cp[3];
	I tmp_355 = (R(5, 54))*cp[10] + (R(5, 54))*cp[11] + tmp_353 + tmp_354;
	I tmp_356 = -R(10, 27)*cp[15] - tmp_278;
	I tmp_357 = (R(5, 27))*cp[11];
	I tmp_358 = (R(2, 27))*cp[3] + tmp_357;
	I tmp_359 = -R(40, 27)*cp[27] + tmp_320;
	I tmp_360 = -R(10, 27)*cp[13] - tmp_288;
	I tmp_361 = (R(2, 27))*cp[9] + tmp_253;
	I tmp_362 = -tmp_284 + tmp_326;
	I tmp_363 = (R(2, 27))*cp[11] + tmp_267;
	I tmp_364 = -tmp_273 + tmp_305;
	I tmp_365 = (R(5, 27))*cp[9];
	I tmp_366 = (R(2, 27))*cp[1] + tmp_365;
	I tmp_367 = -R(40, 27)*cp[25] + tmp_314;
	I tmp_368 = (R(1, 3))*cp[10];
	I tmp_369 = (R(4, 3))*cp[26];
	I tmp_370 = tmp_368 + tmp_369;
	I tmp_371 = (R(8, 3))*cp[24] + tmp_45;
	I tmp_372 = (R(1, 3))*cp[8];
	I tmp_373 = (R(2, 9))*cp[0] - tmp_372;
	I tmp_374 = (R(4, 3))*cp[24];
	I tmp_375 = tmp_372 + tmp_374;
	I tmp_376 = (R(8, 3))*cp[26] + tmp_33;
	I tmp_377 = (R(2, 9))*cp[2] - tmp_368;
	I tmp_378 = (R(2, 3))*cp[26] + (R(2, 3))*cp[27];
	I tmp_379 = (R(1, 6))*cp[10];
	I tmp_380 = (R(1, 6))*cp[11];
	I tmp_381 = tmp_379 + tmp_380;
	I tmp_382 = tmp_23 + tmp_374;
	I tmp_383 = (R(4, 3))*cp[25];
	I tmp_384 = tmp_383 + tmp_91;
	I tmp_385 = tmp_81 + tmp_87 + tmp_88;
	I tmp_386 = (R(1, 6))*cp[8];
	I tmp_387 = (R(1, 6))*cp[9];
	I tmp_388 = (R(1, 9))*cp[0];
	I tmp_389 = (R(1, 9))*cp[1];
	I tmp_390 = -tmp_386 - tmp_387 + tmp_388 + tmp_389;
	I tmp_391 = (R(2, 3))*cp[24] + (R(2, 3))*cp[25];
	I tmp_392 = tmp_386 + tmp_387;
	I tmp_393 = tmp_31 + tmp_369;
	I tmp_394 = (R(4, 3))*cp[27];
	I tmp_395 = tmp_394 + tmp_98;
	I tmp_396 = tmp_60 + tmp_68 + tmp_69;
	I tmp_397 = (R(1, 9))*cp[2];
	I tmp_398 = (R(1, 9))*cp[3];
	I tmp_399 = -tmp_379 - tmp_380 + tmp_397 + tmp_398;
	I tmp_400 = (R(1, 3))*cp[11];
	I tmp_401 = tmp_394 + tmp_400;
	I tmp_402 = (R(8, 3))*cp[25] + tmp_111;
	I tmp_403 = (R(1, 3))*cp[9];
	I tmp_404 = (R(2, 9))*cp[1] - tmp_403;
	I tmp_405 = tmp_383 + tmp_403;
	I tmp_406 = (R(8, 3))*cp[27] + tmp_100;
	I tmp_407 = (R(2, 9))*cp[3] - tmp_400;
	I tmp_408 = -R(5, 3)*cp[4];
	I tmp_409 = tmp_186 + tmp_26 - tmp_27;
	I tmp_410 = (R(2, 3))*cp[6] - tmp_191;
	I tmp_411 = -R(5, 3)*cp[6];
	I tmp_412 = tmp_200 + tmp_39 - tmp_40;
	I tmp_413 = (R(2, 3))*cp[4] - tmp_203;
	I tmp_414 = -R(5, 6)*cp[4] - R(5, 6)*cp[5];
	I tmp_415 = -R(1, 18)*cp[14] - R(1, 18)*cp[15];
	I tmp_416 = (R(2, 9))*cp[30] + (R(2, 9))*cp[31] - tmp_58 - tmp_59;
	I tmp_417 = -R(5, 6)*cp[6] - R(5, 6)*cp[7];
	I tmp_418 = -R(1, 18)*cp[12] - R(1, 18)*cp[13];
	I tmp_419 = (R(2, 9))*cp[28] + (R(2, 9))*cp[29] - tmp_79 - tmp_80;
	I tmp_420 = -R(5, 3)*cp[5];
	I tmp_421 = tmp_187 + tmp_93 - tmp_94;
	I tmp_422 = (R(2, 3))*cp[7] - tmp_192;
	I tmp_423 = -R(5, 3)*cp[7];
	I tmp_424 = tmp_105 - tmp_106 + tmp_201;
	I tmp_425 = (R(2, 3))*cp[5] - tmp_204;
	I tmp_426 = -R(10, 27)*cp[4] - tmp_263;
	I tmp_427 = -R(40, 27)*cp[20] + tmp_221;
	I tmp_428 = -R(10, 27)*cp[6] - tmp_297;
	I tmp_429 = tmp_230 - tmp_290;
	I tmp_430 = tmp_238 - tmp_255;
	I tmp_431 = -R(40, 27)*cp[22] + tmp_246;
	I tmp_432 = -R(20, 27)*cp[20] - R(20, 27)*cp[21] + tmp_257;
	I tmp_433 = -R(1, 54)*cp[12] - R(1, 54)*cp[13] - tmp_226 - tmp_328;
	I tmp_434 = -R(2, 27)*cp[30] - R(2, 27)*cp[31] + tmp_270;
	I tmp_435 = -R(1, 54)*cp[14] - R(1, 54)*cp[15] - tmp_250 - tmp_307;
	I tmp_436 = -R(2, 27)*cp[28] - R(2, 27)*cp[29] + tmp_281;
	I tmp_437 = -R(20, 27)*cp[22] - R(20, 27)*cp[23] + tmp_292;
	I tmp_438 = -R(10, 27)*cp[7] - tmp_298;
	I tmp_439 = -R(40, 27)*cp[23] + tmp_302;
	I tmp_440 = -R(10, 27)*cp[5] - tmp_264;
	I tmp_441 = -tmp_256 + tmp_311;
	I tmp_442 = -tmp_291 + tmp_318;
	I tmp_443 = -R(40, 27)*cp[21] + tmp_324;
	I tmp_444 = -R(10, 27)*cp[8] - tmp_344;
	I tmp_445 = -R(10, 27)*cp[10] - tmp_353;
	I tmp_446 = -R(1, 54)*cp[0] - R(1, 54)*cp[1] - tmp_331 - tmp_365;
	I tmp_447 = -R(1, 54)*cp[2] - R(1, 54)*cp[3] - tmp_339 - tmp_357;
	I tmp_448 = -R(10, 27)*cp[11] - tmp_354;
	I tmp_449 = -R(10, 27)*cp[9] - tmp_345;
	I tmp_450 = -R(5, 3)*cp[10];
	I tmp_451 = (R(2, 3))*cp[8] - tmp_388;
	I tmp_452 = -R(5, 3)*cp[8];
	I tmp_453 = (R(2, 3))*cp[10] - tmp_397;
	I tmp_454 = -R(5, 6)*cp[10] - R(5, 6)*cp[11];
	I tmp_455 = -R(1, 18)*cp[0] - R(1, 18)*cp[1];
	I tmp_456 = -R(5, 6)*cp[8] - R(5, 6)*cp[9];
	I tmp_457 = -R(1, 18)*cp[2] - R(1, 18)*cp[3];
	I tmp_458 = -R(5, 3)*cp[11];
	I tmp_459 = (R(2, 3))*cp[9] - tmp_389;
	I tmp_460 = -R(5, 3)*cp[9];
	I tmp_461 = (R(2, 3))*cp[11] - tmp_398;
	I tmp_462 = 3*cp[4];
	I tmp_463 = -4*cp[22];
	I tmp_464 = 3*cp[6];
	I tmp_465 = -4*cp[20];
	I tmp_466 = (R(3, 2))*cp[4] + (R(3, 2))*cp[5];
	I tmp_467 = (R(3, 2))*cp[6] + (R(3, 2))*cp[7];
	I tmp_468 = -2*cp[22] - 2*cp[23];
	I tmp_469 = -2*cp[20] - 2*cp[21];
	I tmp_470 = 3*cp[5];
	I tmp_471 = -4*cp[23];
	I tmp_472 = 3*cp[7];
	I tmp_473 = -4*cp[21];
	I tmp_474 = (R(4, 3))*cp[22];
	I tmp_475 = tmp_368 + tmp_474;
	I tmp_476 = (R(8, 3))*cp[20] + tmp_174 + tmp_39;
	I tmp_477 = (R(4, 3))*cp[20];
	I tmp_478 = tmp_372 + tmp_477;
	I tmp_479 = (R(8, 3))*cp[22] + tmp_167 + tmp_26;
	I tmp_480 = (R(2, 3))*cp[22] + (R(2, 3))*cp[23];
	I tmp_481 = tmp_164 + tmp_477;
	I tmp_482 = (R(4, 3))*cp[21];
	I tmp_483 = tmp_206 + tmp_482;
	I tmp_484 = tmp_200 + tmp_201 + tmp_81;
	I tmp_485 = (R(2, 3))*cp[20] + (R(2, 3))*cp[21];
	I tmp_486 = tmp_170 + tmp_474;
	I tmp_487 = (R(4, 3))*cp[23];
	I tmp_488 = tmp_211 + tmp_487;
	I tmp_489 = tmp_186 + tmp_187 + tmp_60;
	I tmp_490 = tmp_400 + tmp_487;
	I tmp_491 = (R(8, 3))*cp[21] + tmp_105 + tmp_214;
	I tmp_492 = tmp_403 + tmp_482;
	I tmp_493 = (R(8, 3))*cp[23] + tmp_208 + tmp_93;
	I tmp_494 = 3*cp[10];
	I tmp_495 = 3*cp[8];
	I tmp_496 = (R(3, 2))*cp[10] + (R(3, 2))*cp[11];
	I tmp_497 = (R(3, 2))*cp[8] + (R(3, 2))*cp[9];
	I tmp_498 = 3*cp[11];
	I tmp_499 = 3*cp[9];
	out[0] = -(-cp[12] - tmp_0 - tmp_1)*(-cp[6] - tmp_2 - tmp_3) + (-cp[14] - tmp_3 - tmp_5)*(-cp[4] - tmp_0 - tmp_4);
	out[1] = -(-tmp_10 - tmp_11 - tmp_9)*(-tmp_6 - tmp_7 - tmp_8) + (-tmp_12 - tmp_13 - tmp_6)*(-tmp_14 - tmp_15 - tmp_9);
	out[2] = -(-cp[13] - tmp_16 - tmp_17)*(-cp[7] - tmp_18 - tmp_19) + (-cp[15] - tmp_19 - tmp_20)*(-cp[5] - tmp_16 - tmp_21);
	out[3] = -(tmp_22 + tmp_25)*(-tmp_28 - tmp_30 - tmp_32 - tmp_35) + (tmp_36 + tmp_38)*(-tmp_41 - tmp_43 - tmp_44 - tmp_47);
	out[4] = -(tmp_48 + tmp_49 + tmp_52)*(-tmp_54 - tmp_57 - tmp_61 - tmp_62 - tmp_67 - tmp_70) + (tmp_71 + tmp_72 + tmp_73)*(-tmp_75 - tmp_78 - tmp_82 - tmp_83 - tmp_86 - tmp_89);
	out[5] = (tmp_103 + tmp_104)*(-tmp_107 - tmp_109 - tmp_110 - tmp_113) - (tmp_90 + tmp_92)*(-tmp_102 - tmp_95 - tmp_97 - tmp_99);
	out[6] = -(-tmp_114 - tmp_75)*(-tmp_115 - tmp_116 - tmp_118 - tmp_28) + (-tmp_119 - tmp_54)*(-tmp_120 - tmp_121 - tmp_123 - tmp_41);
	out[7] = -(-tmp_124 - tmp_127 - tmp_48)*(-tmp_104 - tmp_128 - tmp_131 - tmp_132 - tmp_38 - tmp_61) + (-tmp_133 - tmp_134 - tmp_71)*(-tmp_135 - tmp_136 - tmp_137 - tmp_25 - tmp_82 - tmp_92);
	out[8] = -(-tmp_138 - tmp_78)*(-tmp_139 - tmp_140 - tmp_142 - tmp_95) + (-tmp_143 - tmp_57)*(-tmp_107 - tmp_144 - tmp_145 - tmp_147);
	out[9] = -(cp[0] + tmp_1 + tmp_148)*(-cp[10] - tmp_149 - tmp_150) + (cp[2] + tmp_149 + tmp_5)*(-cp[8] - tmp_148 - tmp_151);
	out[10] = (tmp_14 + tmp_154 + tmp_159)*(-tmp_152 - tmp_157 - tmp_158) - (tmp_152 + tmp_153 + tmp_7)*(-tmp_154 - tmp_155 - tmp_156);
	out[11] = -(-cp[11] - tmp_161 - tmp_162)*(cp[1] + tmp_160 + tmp_17) + (cp[3] + tmp_161 + tmp_20)*(-cp[9] - tmp_160 - tmp_163);
	out[12] = (tmp_166 + tmp_22)*(-tmp_168 - tmp_169 - tmp_171 - tmp_30) - (tmp_173 + tmp_36)*(-tmp_175 - tmp_176 - tmp_177 - tmp_43);
	out[13] = (tmp_178 + tmp_181 + tmp_49)*(-tmp_182 - tmp_184 - tmp_185 - tmp_188 - tmp_193 - tmp_62) - (tmp_194 + tmp_195 + tmp_72)*(-tmp_196 - tmp_198 - tmp_199 - tmp_202 - tmp_205 - tmp_83);
	out[14] = -(tmp_103 + tmp_213)*(-tmp_109 - tmp_215 - tmp_216 - tmp_217) + (tmp_207 + tmp_90)*(-tmp_209 - tmp_210 - tmp_212 - tmp_97);
	out[15] = -(tmp_219 + tmp_222 + tmp_225 + tmp_227)*(tmp_229 + tmp_231 + tmp_235 + tmp_237) + (tmp_219 + tmp_239 + tmp_242 + tmp_244)*(tmp_229 + tmp_247 + tmp_249 + tmp_251);
	out[16] = -(tmp_254 + tmp_258 + tmp_262 + tmp_265)*(tmp_268 + tmp_271 + tmp_276 + tmp_279) + (tmp_254 + tmp_282 + tmp_286 + tmp_289)*(tmp_268 + tmp_293 + tmp_296 + tmp_299);
	out[17] = (tmp_301 + tmp_303 + tmp_306 + tmp_308)*(tmp_310 + tmp_312 + tmp_315 + tmp_317) - (tmp_301 + tmp_319 + tmp_321 + tmp_323)*(tmp_310 + tmp_325 + tmp_327 + tmp_329);
	out[18] = -(-tmp_222 - tmp_330 - tmp_332 - tmp_333)*(tmp_231 + tmp_334 + tmp_335 + tmp_336) + (tmp_239 + tmp_330 + tmp_337 + tmp_338)*(-tmp_247 - tmp_334 - tmp_340 - tmp_341);
	out[19] = -(-tmp_258 - tmp_342 - tmp_343 - tmp_346)*(tmp_271 + tmp_347 + tmp_348 + tmp_349) + (tmp_282 + tmp_342 + tmp_350 + tmp_351)*(-tmp_293 - tmp_347 - tmp_352 - tmp_355);
	out[20] = (-tmp_303 - tmp_356 - tmp_358 - tmp_359)*(tmp_312 + tmp_360 + tmp_361 + tmp_362) - (tmp_319 + tmp_356 + tmp_363 + tmp_364)*(-tmp_325 - tmp_360 - tmp_366 - tmp_367);
	out[21] = (tmp_114 + tmp_375)*(tmp_115 + tmp_168 + tmp_376 + tmp_377) - (tmp_119 + tmp_370)*(tmp_120 + tmp_175 + tmp_371 + tmp_373);
	out[22] = (tmp_124 + tmp_391 + tmp_392)*(tmp_128 + tmp_188 + tmp_393 + tmp_395 + tmp_396 + tmp_399) - (tmp_133 + tmp_378 + tmp_381)*(tmp_135 + tmp_202 + tmp_382 + tmp_384 + tmp_385 + tmp_390);
	out[23] = (tmp_138 + tmp_405)*(tmp_139 + tmp_209 + tmp_406 + tmp_407) - (tmp_143 + tmp_401)*(tmp_144 + tmp_215 + tmp_402 + tmp_404);
	out[24] = -(-tmp_182 - tmp_411)*(-tmp_121 - tmp_176 - tmp_412 - tmp_413) + (-tmp_196 - tmp_408)*(-tmp_116 - tmp_169 - tmp_409 - tmp_410);
	out[25] = (-tmp_127 - tmp_178 - tmp_414)*(-tmp_131 - tmp_173 - tmp_185 - tmp_213 - tmp_415 - tmp_416) - (-tmp_134 - tmp_194 - tmp_417)*(-tmp_136 - tmp_166 - tmp_199 - tmp_207 - tmp_418 - tmp_419);
	out[26] = -(-tmp_184 - tmp_423)*(-tmp_145 - tmp_216 - tmp_424 - tmp_425) + (-tmp_198 - tmp_420)*(-tmp_140 - tmp_210 - tmp_421 - tmp_422);
	out[27] = -(tmp_225 + tmp_337 + tmp_426 + tmp_430)*(-tmp_235 - tmp_340 - tmp_428 - tmp_431) + (-tmp_242 - tmp_332 - tmp_426 - tmp_427)*(tmp_249 + tmp_335 + tmp_428 + tmp_429);
	out[28] = -(tmp_262 + tmp_351 + tmp_433 + tmp_436)*(-tmp_276 - tmp_355 - tmp_435 - tmp_437) + (-tmp_286 - tmp_346 - tmp_432 - tmp_433)*(tmp_296 + tmp_349 + tmp_434 + tmp_435);
	out[29] = (tmp_306 + tmp_363 + tmp_438 + tmp_442)*(-tmp_315 - tmp_366 - tmp_440 - tmp_443) - (-tmp_321 - tmp_358 - tmp_438 - tmp_439)*(tmp_327 + tmp_361 + tmp_440 + tmp_441);
	out[30] = (-tmp_227 - tmp_338 - tmp_427 - tmp_444)*(-tmp_237 - tmp_341 - tmp_429 - tmp_445) - (-tmp_244 - tmp_333 - tmp_430 - tmp_444)*(-tmp_251 - tmp_336 - tmp_431 - tmp_445);
	out[31] = (-tmp_265 - tmp_350 - tmp_432 - tmp_446)*(-tmp_279 - tmp_352 - tmp_434 - tmp_447) - (-tmp_289 - tmp_343 - tmp_436 - tmp_446)*(-tmp_299 - tmp_348 - tmp_437 - tmp_447);
	out[32] = -(-tmp_308 - tmp_364 - tmp_439 - tmp_448)*(-tmp_317 - tmp_367 - tmp_441 - tmp_449) + (-tmp_323 - tmp_359 - tmp_442 - tmp_448)*(-tmp_329 - tmp_362 - tmp_443 - tmp_449);
	out[33] = (-tmp_382 - tmp_452)*(tmp_32 + tmp_376 + tmp_409 + tmp_453) - (-tmp_393 - tmp_450)*(tmp_371 + tmp_412 + tmp_44 + tmp_451);
	out[34] = -(-tmp_378 - tmp_454 - tmp_73)*(tmp_375 + tmp_385 + tmp_405 + tmp_419 + tmp_455 + tmp_86) + (-tmp_391 - tmp_456 - tmp_52)*(tmp_370 + tmp_396 + tmp_401 + tmp_416 + tmp_457 + tmp_67);
	out[35] = (-tmp_384 - tmp_460)*(tmp_406 + tmp_421 + tmp_461 + tmp_99) - (-tmp_395 - tmp_458)*(tmp_110 + tmp_402 + tmp_424 + tmp_459);
	out[36] = (cp[0] + tmp_4 + tmp_462)*(-cp[10] - tmp_463 - tmp_464) - (cp[2] + tmp_2 + tmp_464)*(-cp[8] - tmp_462 - tmp_465);
	out[37] = -(tmp_10 + tmp_159 + tmp_467)*(-tmp_157 - tmp_466 - tmp_469) + (tmp_12 + tmp_153 + tmp_466)*(-tmp_155 - tmp_467 - tmp_468);
	out[38] = (-cp[11] - tmp_471 - tmp_472)*(cp[1] + tmp_21 + tmp_470) - (cp[3] + tmp_18 + tmp_472)*(-cp[9] - tmp_470 - tmp_473);
	out[39] = -(tmp_408 + tmp_478)*(tmp_35 + tmp_377 + tmp_410 + tmp_479) + (tmp_411 + tmp_475)*(tmp_373 + tmp_413 + tmp_47 + tmp_476);
	out[40] = (tmp_381 + tmp_417 + tmp_480)*(tmp_390 + tmp_418 + tmp_481 + tmp_483 + tmp_484 + tmp_89) - (tmp_392 + tmp_414 + tmp_485)*(tmp_399 + tmp_415 + tmp_486 + tmp_488 + tmp_489 + tmp_70);
	out[41] = -(tmp_420 + tmp_492)*(tmp_102 + tmp_407 + tmp_422 + tmp_493) + (tmp_423 + tmp_490)*(tmp_113 + tmp_404 + tmp_425 + tmp_491);
	out[42] = (-tmp_450 - tmp_486)*(tmp_123 + tmp_177 + tmp_451 + tmp_476) - (-tmp_452 - tmp_481)*(tmp_118 + tmp_171 + tmp_453 + tmp_479);
	out[43] = -(-tmp_181 - tmp_456 - tmp_485)*(tmp_132 + tmp_193 + tmp_457 + tmp_475 + tmp_489 + tmp_490) + (-tmp_195 - tmp_454 - tmp_480)*(tmp_137 + tmp_205 + tmp_455 + tmp_478 + tmp_484 + tmp_492);
	out[44] = (-tmp_458 - tmp_488)*(tmp_147 + tmp_217 + tmp_459 + tmp_491) - (-tmp_460 - tmp_483)*(tmp_142 + tmp_212 + tmp_461 + tmp_493);
	out[45] = (cp[12] + tmp_151 + tmp_495)*(cp[6] + tmp_463 + tmp_494) - (cp[14] + tmp_150 + tmp_494)*(cp[4] + tmp_465 + tmp_495);
	out[46] = (tmp_11 + tmp_468 + tmp_496)*(tmp_158 + tmp_497 + tmp_8) - (tmp_13 + tmp_469 + tmp_497)*(tmp_15 + tmp_156 + tmp_496);
	out[47] = (cp[13] + tmp_163 + tmp_499)*(cp[7] + tmp_471 + tmp_498) - (cp[15] + tmp_162 + tmp_498)*(cp[5] + tmp_473 + tmp_499);
}}
#undef R
#undef I