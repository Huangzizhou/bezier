#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVectorT<2, 2, 2>(const span<const fp_t> cpFP, const span<Interval> out) {
	assert(cpFP.size() == 24);
	assert(out.size() == 18);
	std::array<Interval, 24> cp;
	for (uint i = 0; i < 24; ++i) cp[i] = cpFP[i];
	I tmp_0 = 3*cp[0];
	I tmp_1 = -4*cp[12];
	I tmp_2 = -4*cp[22];
	I tmp_3 = 3*cp[2];
	I tmp_4 = -4*cp[20];
	I tmp_5 = 4*cp[14];
	I tmp_6 = -tmp_5;
	I tmp_7 = (R(3, 2))*cp[0] + (R(3, 2))*cp[1];
	I tmp_8 = 2*cp[12];
	I tmp_9 = -tmp_8;
	I tmp_10 = 2*cp[13];
	I tmp_11 = -tmp_10;
	I tmp_12 = tmp_11 + tmp_9;
	I tmp_13 = (R(1, 2))*cp[4];
	I tmp_14 = (R(1, 2))*cp[5];
	I tmp_15 = tmp_13 + tmp_14;
	I tmp_16 = (R(1, 2))*cp[10] + (R(1, 2))*cp[11];
	I tmp_17 = (R(3, 2))*cp[2] + (R(3, 2))*cp[3];
	I tmp_18 = 2*cp[22];
	I tmp_19 = -tmp_18;
	I tmp_20 = 2*cp[23];
	I tmp_21 = -tmp_20;
	I tmp_22 = tmp_19 + tmp_21;
	I tmp_23 = 2*cp[20];
	I tmp_24 = -tmp_23;
	I tmp_25 = 2*cp[21];
	I tmp_26 = -tmp_25;
	I tmp_27 = tmp_24 + tmp_26;
	I tmp_28 = (R(1, 2))*cp[8];
	I tmp_29 = (R(1, 2))*cp[9];
	I tmp_30 = tmp_28 + tmp_29;
	I tmp_31 = 2*cp[14];
	I tmp_32 = -tmp_31;
	I tmp_33 = 2*cp[15];
	I tmp_34 = -tmp_33;
	I tmp_35 = tmp_32 + tmp_34;
	I tmp_36 = (R(1, 2))*cp[6];
	I tmp_37 = (R(1, 2))*cp[7];
	I tmp_38 = tmp_36 + tmp_37;
	I tmp_39 = -4*cp[23];
	I tmp_40 = 3*cp[3];
	I tmp_41 = 4*cp[13];
	I tmp_42 = -tmp_41;
	I tmp_43 = 3*cp[1];
	I tmp_44 = 4*cp[15];
	I tmp_45 = -tmp_44;
	I tmp_46 = -4*cp[21];
	I tmp_47 = cp[0] - cp[8];
	I tmp_48 = -2*cp[18];
	I tmp_49 = cp[2] + tmp_48;
	I tmp_50 = cp[6] + tmp_32;
	I tmp_51 = cp[10] - cp[2];
	I tmp_52 = cp[0] - 2*cp[16];
	I tmp_53 = cp[4] + tmp_9;
	I tmp_54 = (R(1, 2))*cp[0] + (R(1, 2))*cp[1];
	I tmp_55 = -tmp_28 - tmp_29 + tmp_54;
	I tmp_56 = (R(1, 2))*cp[2];
	I tmp_57 = (R(1, 2))*cp[3];
	I tmp_58 = tmp_56 + tmp_57;
	I tmp_59 = -cp[18] - cp[19] + tmp_58;
	I tmp_60 = -cp[14] - cp[15];
	I tmp_61 = tmp_38 + tmp_60;
	I tmp_62 = tmp_16 - tmp_56 - tmp_57;
	I tmp_63 = -cp[16] - cp[17] + tmp_54;
	I tmp_64 = -cp[12] - cp[13];
	I tmp_65 = tmp_15 + tmp_64;
	I tmp_66 = cp[11] - cp[3];
	I tmp_67 = -2*cp[17] + cp[1];
	I tmp_68 = cp[5] + tmp_11;
	I tmp_69 = -2*cp[19];
	I tmp_70 = cp[3] + tmp_69;
	I tmp_71 = cp[7] + tmp_34;
	I tmp_72 = cp[2] - cp[6];
	I tmp_73 = 4*cp[16];
	I tmp_74 = cp[0] - cp[4];
	I tmp_75 = 2*cp[18];
	I tmp_76 = 2*cp[19];
	I tmp_77 = -tmp_36 - tmp_37 + tmp_58;
	I tmp_78 = -tmp_13 - tmp_14 + tmp_54;
	I tmp_79 = 2*cp[16];
	I tmp_80 = 2*cp[17];
	I tmp_81 = tmp_79 + tmp_80;
	I tmp_82 = cp[1] - cp[5];
	I tmp_83 = cp[3] - cp[7];
	I tmp_84 = cp[10] + tmp_19;
	I tmp_85 = cp[8] + tmp_24;
	I tmp_86 = -cp[22] - cp[23];
	I tmp_87 = tmp_16 + tmp_86;
	I tmp_88 = -cp[20] - cp[21];
	I tmp_89 = tmp_30 + tmp_88;
	I tmp_90 = cp[11] + tmp_21;
	I tmp_91 = cp[9] + tmp_26;
	I tmp_92 = cp[0] + tmp_79;
	I tmp_93 = cp[2] + tmp_75;
	I tmp_94 = cp[16] + cp[17] + tmp_54;
	I tmp_95 = cp[18] + cp[19] + tmp_58;
	I tmp_96 = cp[3] + tmp_76;
	I tmp_97 = cp[1] + tmp_80;
	out[0] = (-cp[10] - tmp_2 - tmp_3)*(-cp[4] - tmp_0 - tmp_1) - (-cp[6] - tmp_3 - tmp_6)*(-cp[8] - tmp_0 - tmp_4);
	out[1] = (-tmp_12 - tmp_15 - tmp_7)*(-tmp_16 - tmp_17 - tmp_22) - (-tmp_17 - tmp_35 - tmp_38)*(-tmp_27 - tmp_30 - tmp_7);
	out[2] = (-cp[11] - tmp_39 - tmp_40)*(-cp[5] - tmp_42 - tmp_43) - (-cp[7] - tmp_40 - tmp_45)*(-cp[9] - tmp_43 - tmp_46);
	out[3] = tmp_47*(-tmp_18 - tmp_49 - tmp_50) + tmp_51*(-tmp_23 - tmp_52 - tmp_53);
	out[4] = tmp_55*(-cp[22] - cp[23] - tmp_59 - tmp_61) + tmp_62*(-cp[20] - cp[21] - tmp_63 - tmp_65);
	out[5] = tmp_66*(-tmp_25 - tmp_67 - tmp_68) - (-cp[1] + cp[9])*(-tmp_20 - tmp_70 - tmp_71);
	out[6] = -(cp[0] + 3*cp[8] + tmp_4)*(4*cp[18] + tmp_2 + tmp_72) + (3*cp[10] + cp[2] + tmp_2)*(tmp_4 + tmp_73 + tmp_74);
	out[7] = (tmp_27 + tmp_78 + tmp_81)*((R(3, 2))*cp[10] + (R(3, 2))*cp[11] + tmp_22 + tmp_58) - ((R(3, 2))*cp[8] + (R(3, 2))*cp[9] + tmp_27 + tmp_54)*(tmp_22 + tmp_75 + tmp_76 + tmp_77);
	out[8] = (3*cp[11] + cp[3] + tmp_39)*(4*cp[17] + tmp_46 + tmp_82) - (4*cp[19] + tmp_39 + tmp_83)*(cp[1] + 3*cp[9] + tmp_46);
	out[9] = tmp_72*(-tmp_52 - tmp_8 - tmp_85) - tmp_74*(-tmp_31 - tmp_49 - tmp_84);
	out[10] = tmp_77*(-cp[12] - cp[13] - tmp_63 - tmp_89) - tmp_78*(-cp[14] - cp[15] - tmp_59 - tmp_87);
	out[11] = -tmp_82*(-tmp_33 - tmp_70 - tmp_90) + tmp_83*(-tmp_10 - tmp_67 - tmp_91);
	out[12] = -(tmp_19 + tmp_50 + tmp_93)*(tmp_85 + tmp_9 + tmp_92) + (tmp_24 + tmp_53 + tmp_92)*(tmp_32 + tmp_84 + tmp_93);
	out[13] = (tmp_60 + tmp_87 + tmp_95)*(tmp_65 + tmp_88 + tmp_94) - (tmp_61 + tmp_86 + tmp_95)*(tmp_64 + tmp_89 + tmp_94);
	out[14] = -(tmp_11 + tmp_91 + tmp_97)*(tmp_21 + tmp_71 + tmp_96) + (tmp_26 + tmp_68 + tmp_97)*(tmp_34 + tmp_90 + tmp_96);
	out[15] = (cp[0] + 3*cp[4] + tmp_1)*(4*cp[18] - tmp_5 - tmp_51) - (cp[2] + 3*cp[6] + tmp_6)*(tmp_1 + tmp_47 + tmp_73);
	out[16] = -(tmp_12 + tmp_55 + tmp_81)*((R(3, 2))*cp[6] + (R(3, 2))*cp[7] + tmp_35 + tmp_58) + ((R(3, 2))*cp[4] + (R(3, 2))*cp[5] + tmp_12 + tmp_54)*(-tmp_31 - tmp_33 - tmp_48 - tmp_62 - tmp_69);
	out[17] = (4*cp[19] - tmp_44 - tmp_66)*(cp[1] + 3*cp[5] + tmp_42) - (cp[3] + 3*cp[7] + tmp_45)*(4*cp[17] + cp[1] - cp[9] - tmp_41);
}}
#undef R
#undef I