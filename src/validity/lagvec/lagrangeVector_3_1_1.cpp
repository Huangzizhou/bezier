#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVector<3, 1, 1>(const span<const fp_t> cpFP, const span<Interval> out) {
	assert(cpFP.size() == 24);
	assert(out.size() == 27);
	std::array<Interval, 24> cp;
	for (uint i = 0; i < 24; ++i) cp[i] = cpFP[i];
	I tmp_0 = -cp[0] + cp[12];
	I tmp_1 = -cp[1];
	I tmp_2 = cp[10] + tmp_1;
	I tmp_3 = -cp[5];
	I tmp_4 = -cp[2] - tmp_3;
	I tmp_5 = -cp[2];
	I tmp_6 = cp[11] + tmp_5;
	I tmp_7 = -cp[4];
	I tmp_8 = -cp[1] - tmp_7;
	I tmp_9 = -cp[3];
	I tmp_10 = -cp[0] - tmp_9;
	I tmp_11 = cp[14] + tmp_5;
	I tmp_12 = cp[13] + tmp_1;
	I tmp_13 = -cp[9];
	I tmp_14 = -cp[0] - tmp_13;
	I tmp_15 = (R(1, 2))*cp[15];
	I tmp_16 = -tmp_15;
	I tmp_17 = (R(1, 2))*cp[3];
	I tmp_18 = -tmp_17;
	I tmp_19 = (R(1, 2))*cp[0];
	I tmp_20 = (R(1, 2))*cp[12];
	I tmp_21 = tmp_19 + tmp_20;
	I tmp_22 = -tmp_16 - tmp_18 - tmp_21;
	I tmp_23 = (R(1, 2))*cp[23];
	I tmp_24 = (R(1, 2))*cp[2];
	I tmp_25 = -tmp_24;
	I tmp_26 = (R(1, 2))*cp[11];
	I tmp_27 = (R(1, 2))*cp[14];
	I tmp_28 = tmp_26 - tmp_27;
	I tmp_29 = tmp_23 + tmp_25 + tmp_28;
	I tmp_30 = (R(1, 2))*cp[22];
	I tmp_31 = (R(1, 2))*cp[1];
	I tmp_32 = -tmp_31;
	I tmp_33 = (R(1, 2))*cp[10];
	I tmp_34 = (R(1, 2))*cp[13];
	I tmp_35 = tmp_33 - tmp_34;
	I tmp_36 = tmp_30 + tmp_32 + tmp_35;
	I tmp_37 = (R(1, 2))*cp[21];
	I tmp_38 = -tmp_37;
	I tmp_39 = (R(1, 2))*cp[9];
	I tmp_40 = -tmp_39;
	I tmp_41 = tmp_38 + tmp_40;
	I tmp_42 = -tmp_21 - tmp_41;
	I tmp_43 = (R(1, 2))*cp[5];
	I tmp_44 = -tmp_43;
	I tmp_45 = tmp_24 + tmp_44;
	I tmp_46 = (R(1, 2))*cp[17];
	I tmp_47 = tmp_27 - tmp_46;
	I tmp_48 = -tmp_45 - tmp_47;
	I tmp_49 = (R(1, 2))*cp[4];
	I tmp_50 = -tmp_49;
	I tmp_51 = tmp_31 + tmp_50;
	I tmp_52 = (R(1, 2))*cp[16];
	I tmp_53 = tmp_34 - tmp_52;
	I tmp_54 = -tmp_51 - tmp_53;
	I tmp_55 = -cp[13] + cp[16];
	I tmp_56 = -cp[23];
	I tmp_57 = -cp[14] - tmp_56;
	I tmp_58 = -cp[22];
	I tmp_59 = -cp[13] - tmp_58;
	I tmp_60 = -cp[14] + cp[17];
	I tmp_61 = -cp[12] + cp[15];
	I tmp_62 = -cp[21];
	I tmp_63 = -cp[12] - tmp_62;
	I tmp_64 = tmp_19 + tmp_39;
	I tmp_65 = (R(1, 2))*cp[6];
	I tmp_66 = -tmp_65;
	I tmp_67 = tmp_18 + tmp_66;
	I tmp_68 = -tmp_64 - tmp_67;
	I tmp_69 = -tmp_23;
	I tmp_70 = -tmp_24 - tmp_28 - tmp_69;
	I tmp_71 = -tmp_30;
	I tmp_72 = -tmp_31 - tmp_35 - tmp_71;
	I tmp_73 = -tmp_20;
	I tmp_74 = -tmp_38 - tmp_64 - tmp_73;
	I tmp_75 = (R(1, 2))*cp[8];
	I tmp_76 = -tmp_75;
	I tmp_77 = tmp_26 + tmp_76;
	I tmp_78 = -tmp_45 - tmp_77;
	I tmp_79 = (R(1, 2))*cp[7];
	I tmp_80 = -tmp_79;
	I tmp_81 = tmp_33 + tmp_80;
	I tmp_82 = -tmp_51 - tmp_81;
	I tmp_83 = (R(1, 4))*cp[3];
	I tmp_84 = (R(1, 4))*cp[21];
	I tmp_85 = -R(1, 4)*cp[18];
	I tmp_86 = (R(1, 4))*cp[6];
	I tmp_87 = (R(1, 4))*cp[0];
	I tmp_88 = (R(1, 4))*cp[12];
	I tmp_89 = tmp_85 - tmp_86 + tmp_87 + tmp_88;
	I tmp_90 = (R(1, 4))*cp[15];
	I tmp_91 = (R(1, 4))*cp[9];
	I tmp_92 = -tmp_90 + tmp_91;
	I tmp_93 = tmp_83 - tmp_84 - tmp_89 - tmp_92;
	I tmp_94 = (R(1, 4))*cp[8];
	I tmp_95 = (R(1, 4))*cp[14];
	I tmp_96 = -R(1, 4)*cp[17];
	I tmp_97 = (R(1, 4))*cp[5];
	I tmp_98 = (R(1, 4))*cp[11];
	I tmp_99 = (R(1, 4))*cp[23];
	I tmp_100 = tmp_96 - tmp_97 + tmp_98 + tmp_99;
	I tmp_101 = (R(1, 4))*cp[2];
	I tmp_102 = -R(1, 4)*cp[20] + tmp_101;
	I tmp_103 = -tmp_100 - tmp_102 + tmp_94 - tmp_95;
	I tmp_104 = (R(1, 4))*cp[7];
	I tmp_105 = (R(1, 4))*cp[13];
	I tmp_106 = -R(1, 4)*cp[16];
	I tmp_107 = (R(1, 4))*cp[4];
	I tmp_108 = (R(1, 4))*cp[10];
	I tmp_109 = (R(1, 4))*cp[22];
	I tmp_110 = tmp_106 - tmp_107 + tmp_108 + tmp_109;
	I tmp_111 = (R(1, 4))*cp[1];
	I tmp_112 = -R(1, 4)*cp[19] + tmp_111;
	I tmp_113 = tmp_104 - tmp_105 - tmp_110 - tmp_112;
	I tmp_114 = -R(1, 2)*cp[18];
	I tmp_115 = tmp_114 + tmp_20;
	I tmp_116 = -tmp_115 - tmp_16 - tmp_37;
	I tmp_117 = -R(1, 2)*cp[20];
	I tmp_118 = tmp_117 + tmp_23;
	I tmp_119 = -tmp_118 - tmp_47;
	I tmp_120 = -R(1, 2)*cp[19];
	I tmp_121 = tmp_120 + tmp_30;
	I tmp_122 = -tmp_121 - tmp_53;
	I tmp_123 = -cp[10] - tmp_58;
	I tmp_124 = -cp[8];
	I tmp_125 = -cp[11] - tmp_124;
	I tmp_126 = -cp[7];
	I tmp_127 = -cp[10] - tmp_126;
	I tmp_128 = -cp[11] - tmp_56;
	I tmp_129 = cp[21] + tmp_13;
	I tmp_130 = cp[6] + tmp_13;
	I tmp_131 = -tmp_118 - tmp_77;
	I tmp_132 = -tmp_121 - tmp_81;
	I tmp_133 = (R(1, 2))*cp[18];
	I tmp_134 = tmp_133 + tmp_41 + tmp_65;
	I tmp_135 = cp[20] + tmp_56;
	I tmp_136 = cp[19] + tmp_58;
	I tmp_137 = cp[18] + tmp_62;
	I tmp_138 = tmp_17 + tmp_19;
	I tmp_139 = -tmp_138 - tmp_16 - tmp_73;
	I tmp_140 = tmp_25 + tmp_44;
	I tmp_141 = tmp_26 + tmp_75;
	I tmp_142 = tmp_140 + tmp_141;
	I tmp_143 = tmp_32 + tmp_50;
	I tmp_144 = tmp_33 + tmp_79;
	I tmp_145 = tmp_143 + tmp_144;
	I tmp_146 = tmp_40 + tmp_66;
	I tmp_147 = -tmp_138 - tmp_146;
	I tmp_148 = tmp_27 + tmp_46;
	I tmp_149 = tmp_140 + tmp_148;
	I tmp_150 = tmp_34 + tmp_52;
	I tmp_151 = tmp_143 + tmp_150;
	I tmp_152 = tmp_83 - tmp_84;
	I tmp_153 = -tmp_152 - tmp_89 - tmp_90 + tmp_91;
	I tmp_154 = tmp_94 - tmp_95;
	I tmp_155 = (R(1, 4))*cp[20] + tmp_100 - tmp_101 + tmp_154;
	I tmp_156 = tmp_104 - tmp_105;
	I tmp_157 = (R(1, 4))*cp[19] + tmp_110 - tmp_111 + tmp_156;
	I tmp_158 = tmp_117 + tmp_69;
	I tmp_159 = -tmp_148 - tmp_158;
	I tmp_160 = tmp_120 + tmp_71;
	I tmp_161 = -tmp_150 - tmp_160;
	I tmp_162 = -tmp_115 - tmp_15 - tmp_38;
	I tmp_163 = -tmp_152 - tmp_85 - tmp_86 - tmp_87 + tmp_88 - tmp_92;
	I tmp_164 = -tmp_102 - tmp_154 - tmp_96 - tmp_97 - tmp_98 + tmp_99;
	I tmp_165 = -tmp_106 - tmp_107 - tmp_108 + tmp_109 - tmp_112 - tmp_156;
	I tmp_166 = -tmp_141 - tmp_158;
	I tmp_167 = -tmp_144 - tmp_160;
	I tmp_168 = tmp_133 + tmp_146 + tmp_37;
	I tmp_169 = cp[16] + tmp_7;
	I tmp_170 = -cp[5] - tmp_124;
	I tmp_171 = cp[17] + tmp_3;
	I tmp_172 = -cp[4] - tmp_126;
	I tmp_173 = cp[15] + tmp_9;
	I tmp_174 = -cp[6];
	I tmp_175 = -cp[3] - tmp_174;
	I tmp_176 = -tmp_114 - tmp_15 - tmp_17 - tmp_66;
	I tmp_177 = tmp_46 + tmp_76;
	I tmp_178 = -tmp_117 - tmp_177 - tmp_43;
	I tmp_179 = tmp_52 + tmp_80;
	I tmp_180 = -tmp_120 - tmp_179 - tmp_49;
	I tmp_181 = -cp[16] + cp[19];
	I tmp_182 = -cp[17] + cp[20];
	I tmp_183 = -cp[15] + cp[18];
	I tmp_184 = tmp_133 + tmp_15 + tmp_67;
	I tmp_185 = (R(1, 2))*cp[20] + tmp_177 + tmp_44;
	I tmp_186 = (R(1, 2))*cp[19] + tmp_179 + tmp_50;
	I tmp_187 = cp[18] + tmp_174;
	I tmp_188 = cp[20] + tmp_124;
	I tmp_189 = cp[19] + tmp_126;
	out[0] = tmp_0*(-tmp_2*tmp_4 + tmp_6*tmp_8) + tmp_10*(tmp_11*tmp_2 - tmp_12*tmp_6) + tmp_14*(-tmp_11*tmp_8 + tmp_12*tmp_4);
	out[1] = tmp_0*(tmp_29*tmp_54 - tmp_36*tmp_48) + tmp_22*(tmp_11*tmp_36 - tmp_12*tmp_29) + tmp_42*(-tmp_11*tmp_54 + tmp_12*tmp_48);
	out[2] = tmp_0*(tmp_55*tmp_57 - tmp_59*tmp_60) + tmp_61*(tmp_11*tmp_59 - tmp_12*tmp_57) + tmp_63*(-tmp_11*tmp_55 + tmp_12*tmp_60);
	out[3] = tmp_14*(-tmp_70*tmp_82 + tmp_72*tmp_78) + tmp_68*(tmp_2*tmp_70 - tmp_6*tmp_72) + tmp_74*(-tmp_2*tmp_78 + tmp_6*tmp_82);
	out[4] = tmp_42*(tmp_103*tmp_72 - tmp_113*tmp_70) + tmp_74*(-tmp_103*tmp_36 + tmp_113*tmp_29) + tmp_93*(-tmp_29*tmp_72 + tmp_36*tmp_70);
	out[5] = tmp_116*(-tmp_57*tmp_72 + tmp_59*tmp_70) + tmp_63*(tmp_119*tmp_72 - tmp_122*tmp_70) + tmp_74*(-tmp_119*tmp_59 + tmp_122*tmp_57);
	out[6] = tmp_129*(-tmp_125*tmp_2 + tmp_127*tmp_6) + tmp_130*(-tmp_123*tmp_6 + tmp_128*tmp_2) + tmp_14*(tmp_123*tmp_125 - tmp_127*tmp_128);
	out[7] = tmp_129*(-tmp_131*tmp_36 + tmp_132*tmp_29) + tmp_134*(-tmp_123*tmp_29 + tmp_128*tmp_36) + tmp_42*(tmp_123*tmp_131 - tmp_128*tmp_132);
	out[8] = tmp_129*(-tmp_135*tmp_59 + tmp_136*tmp_57) + tmp_137*(-tmp_123*tmp_57 + tmp_128*tmp_59) + tmp_63*(tmp_123*tmp_135 - tmp_128*tmp_136);
	out[9] = tmp_10*(-tmp_142*tmp_151 + tmp_145*tmp_149) + tmp_139*(tmp_142*tmp_8 - tmp_145*tmp_4) + tmp_147*(-tmp_149*tmp_8 + tmp_151*tmp_4);
	out[10] = tmp_139*(tmp_155*tmp_54 - tmp_157*tmp_48) + tmp_153*(-tmp_149*tmp_54 + tmp_151*tmp_48) + tmp_22*(tmp_149*tmp_157 - tmp_151*tmp_155);
	out[11] = tmp_139*(tmp_159*tmp_55 - tmp_161*tmp_60) + tmp_162*(-tmp_149*tmp_55 + tmp_151*tmp_60) + tmp_61*(tmp_149*tmp_161 - tmp_151*tmp_159);
	out[12] = tmp_147*(-tmp_164*tmp_82 + tmp_165*tmp_78) + tmp_163*(tmp_142*tmp_82 - tmp_145*tmp_78) + tmp_68*(-tmp_142*tmp_165 + tmp_145*tmp_164);
	out[13] = tmp_153*(tmp_103*tmp_165 - tmp_113*tmp_164) + tmp_163*(-tmp_103*tmp_157 + tmp_113*tmp_155) + tmp_93*(-tmp_155*tmp_165 + tmp_157*tmp_164);
	out[14] = tmp_116*(-tmp_159*tmp_165 + tmp_161*tmp_164) + tmp_162*(tmp_119*tmp_165 - tmp_122*tmp_164) + tmp_163*(-tmp_119*tmp_161 + tmp_122*tmp_159);
	out[15] = tmp_130*(-tmp_142*tmp_167 + tmp_145*tmp_166) + tmp_147*(tmp_125*tmp_167 - tmp_127*tmp_166) + tmp_168*(-tmp_125*tmp_145 + tmp_127*tmp_142);
	out[16] = tmp_134*(-tmp_155*tmp_167 + tmp_157*tmp_166) + tmp_153*(tmp_131*tmp_167 - tmp_132*tmp_166) + tmp_168*(-tmp_131*tmp_157 + tmp_132*tmp_155);
	out[17] = tmp_137*(-tmp_159*tmp_167 + tmp_161*tmp_166) + tmp_162*(tmp_135*tmp_167 - tmp_136*tmp_166) + tmp_168*(-tmp_135*tmp_161 + tmp_136*tmp_159);
	out[18] = tmp_10*(-tmp_169*tmp_170 + tmp_171*tmp_172) + tmp_173*(tmp_170*tmp_8 - tmp_172*tmp_4) + tmp_175*(tmp_169*tmp_4 - tmp_171*tmp_8);
	out[19] = tmp_173*(tmp_178*tmp_54 - tmp_180*tmp_48) + tmp_176*(tmp_169*tmp_48 - tmp_171*tmp_54) + tmp_22*(-tmp_169*tmp_178 + tmp_171*tmp_180);
	out[20] = tmp_173*(-tmp_181*tmp_60 + tmp_182*tmp_55) + tmp_183*(tmp_169*tmp_60 - tmp_171*tmp_55) + tmp_61*(-tmp_169*tmp_182 + tmp_171*tmp_181);
	out[21] = tmp_175*(-tmp_185*tmp_82 + tmp_186*tmp_78) + tmp_184*(tmp_170*tmp_82 - tmp_172*tmp_78) + tmp_68*(-tmp_170*tmp_186 + tmp_172*tmp_185);
	out[22] = tmp_176*(tmp_103*tmp_186 - tmp_113*tmp_185) + tmp_184*(-tmp_103*tmp_180 + tmp_113*tmp_178) + tmp_93*(-tmp_178*tmp_186 + tmp_180*tmp_185);
	out[23] = tmp_116*(tmp_181*tmp_185 - tmp_182*tmp_186) + tmp_183*(tmp_119*tmp_186 - tmp_122*tmp_185) + tmp_184*(-tmp_119*tmp_181 + tmp_122*tmp_182);
	out[24] = tmp_130*(-tmp_170*tmp_189 + tmp_172*tmp_188) + tmp_175*(tmp_125*tmp_189 - tmp_127*tmp_188) + tmp_187*(-tmp_125*tmp_172 + tmp_127*tmp_170);
	out[25] = tmp_134*(-tmp_178*tmp_189 + tmp_180*tmp_188) + tmp_176*(tmp_131*tmp_189 - tmp_132*tmp_188) + tmp_187*(-tmp_131*tmp_180 + tmp_132*tmp_178);
	out[26] = tmp_137*(tmp_181*tmp_188 - tmp_182*tmp_189) + tmp_183*(tmp_135*tmp_189 - tmp_136*tmp_188) + tmp_187*(-tmp_135*tmp_181 + tmp_136*tmp_182);
}
}
#undef R
#undef I