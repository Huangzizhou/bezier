#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVector<2, 1, 2>(const std::span<const fp_t> cpFP, const std::span<Interval> out) {
	assert(cpFP.size() == 18);
	assert(out.size() == 16);
	std::array<Interval, 18> cp;
	for (uint i = 0; i < 18; ++i) cp[i] = cpFP[i];
	I tmp_0 = 3*cp[0];
	I tmp_1 = -4*cp[14];
	I tmp_2 = 3*cp[1];
	I tmp_3 = -4*cp[9];
	I tmp_4 = -4*cp[8];
	I tmp_5 = -4*cp[15];
	I tmp_6 = -R(5, 3)*cp[0];
	I tmp_7 = (R(4, 3))*cp[14];
	I tmp_8 = (R(1, 3))*cp[6];
	I tmp_9 = -R(32, 9)*cp[17];
	I tmp_10 = (R(8, 9))*cp[11];
	I tmp_11 = (R(8, 3))*cp[15] + tmp_10 + tmp_9;
	I tmp_12 = (R(2, 3))*cp[1] - R(1, 9)*cp[5];
	I tmp_13 = (R(1, 3))*cp[7];
	I tmp_14 = (R(2, 9))*cp[3] - tmp_13;
	I tmp_15 = (R(8, 9))*cp[9];
	I tmp_16 = (R(4, 9))*cp[13] - tmp_15;
	I tmp_17 = (R(4, 3))*cp[15];
	I tmp_18 = -R(5, 3)*cp[1];
	I tmp_19 = -R(32, 9)*cp[16];
	I tmp_20 = (R(8, 9))*cp[10];
	I tmp_21 = (R(8, 3))*cp[14] + tmp_19 + tmp_20;
	I tmp_22 = (R(2, 3))*cp[0] - R(1, 9)*cp[4];
	I tmp_23 = (R(2, 9))*cp[2] - tmp_8;
	I tmp_24 = (R(8, 9))*cp[8];
	I tmp_25 = (R(4, 9))*cp[12] - tmp_24;
	I tmp_26 = (R(1, 3))*cp[0];
	I tmp_27 = -R(5, 3)*cp[6];
	I tmp_28 = -R(1, 9)*cp[3] + (R(2, 3))*cp[7];
	I tmp_29 = (R(1, 3))*cp[1];
	I tmp_30 = (R(2, 9))*cp[5] - tmp_29;
	I tmp_31 = (R(8, 9))*cp[13];
	I tmp_32 = (R(4, 9))*cp[9] - tmp_31;
	I tmp_33 = -R(5, 3)*cp[7];
	I tmp_34 = -R(1, 9)*cp[2] + (R(2, 3))*cp[6];
	I tmp_35 = (R(2, 9))*cp[4] - tmp_26;
	I tmp_36 = (R(8, 9))*cp[12];
	I tmp_37 = (R(4, 9))*cp[8] - tmp_36;
	I tmp_38 = 3*cp[6];
	I tmp_39 = -4*cp[13];
	I tmp_40 = 3*cp[7];
	I tmp_41 = -4*cp[12];
	I tmp_42 = (R(1, 3))*cp[2];
	I tmp_43 = (R(4, 3))*cp[8];
	I tmp_44 = (R(8, 9))*cp[15];
	I tmp_45 = (R(4, 9))*cp[11] - tmp_44 + tmp_9;
	I tmp_46 = (R(8, 3))*cp[9] + tmp_31;
	I tmp_47 = (R(1, 3))*cp[3];
	I tmp_48 = (R(2, 9))*cp[7] - tmp_47;
	I tmp_49 = (R(4, 3))*cp[9];
	I tmp_50 = (R(8, 9))*cp[14];
	I tmp_51 = (R(4, 9))*cp[10] + tmp_19 - tmp_50;
	I tmp_52 = (R(8, 3))*cp[8] + tmp_36;
	I tmp_53 = (R(2, 9))*cp[6] - tmp_42;
	I tmp_54 = -R(10, 27)*cp[0] - R(1, 27)*cp[4];
	I tmp_55 = (R(8, 27))*cp[14];
	I tmp_56 = -R(4, 27)*cp[10] + tmp_55;
	I tmp_57 = (R(32, 27))*cp[16];
	I tmp_58 = (R(8, 27))*cp[12] + tmp_57;
	I tmp_59 = -R(40, 27)*cp[8] + tmp_58;
	I tmp_60 = (R(5, 27))*cp[2] + (R(2, 27))*cp[6];
	I tmp_61 = -R(10, 27)*cp[1] - R(1, 27)*cp[5];
	I tmp_62 = (R(8, 27))*cp[11];
	I tmp_63 = -R(40, 27)*cp[15] + tmp_62;
	I tmp_64 = (R(32, 27))*cp[17];
	I tmp_65 = (R(8, 27))*cp[9] + tmp_64;
	I tmp_66 = -R(4, 27)*cp[13] + tmp_65;
	I tmp_67 = (R(2, 27))*cp[3] + (R(5, 27))*cp[7];
	I tmp_68 = (R(8, 27))*cp[10];
	I tmp_69 = -R(40, 27)*cp[14] + tmp_68;
	I tmp_70 = (R(8, 27))*cp[8] + tmp_57;
	I tmp_71 = -R(4, 27)*cp[12] + tmp_70;
	I tmp_72 = (R(2, 27))*cp[2] + (R(5, 27))*cp[6];
	I tmp_73 = (R(8, 27))*cp[15];
	I tmp_74 = -R(4, 27)*cp[11] + tmp_73;
	I tmp_75 = (R(8, 27))*cp[13] + tmp_64;
	I tmp_76 = -R(40, 27)*cp[9] + tmp_75;
	I tmp_77 = (R(5, 27))*cp[3] + (R(2, 27))*cp[7];
	I tmp_78 = -R(1, 27)*cp[2] - R(10, 27)*cp[6];
	I tmp_79 = (R(2, 27))*cp[0] + (R(5, 27))*cp[4];
	I tmp_80 = -R(40, 27)*cp[12] + tmp_70;
	I tmp_81 = -R(1, 27)*cp[3] - R(10, 27)*cp[7];
	I tmp_82 = (R(5, 27))*cp[1] + (R(2, 27))*cp[5];
	I tmp_83 = -R(4, 27)*cp[9] + tmp_75;
	I tmp_84 = (R(5, 27))*cp[0] + (R(2, 27))*cp[4];
	I tmp_85 = -R(4, 27)*cp[8] + tmp_58;
	I tmp_86 = (R(2, 27))*cp[1] + (R(5, 27))*cp[5];
	I tmp_87 = -R(40, 27)*cp[13] + tmp_65;
	I tmp_88 = (R(4, 3))*cp[12];
	I tmp_89 = (R(1, 3))*cp[4];
	I tmp_90 = (R(8, 3))*cp[13] + tmp_15;
	I tmp_91 = (R(1, 3))*cp[5];
	I tmp_92 = (R(2, 9))*cp[1] - tmp_91;
	I tmp_93 = (R(4, 3))*cp[13];
	I tmp_94 = (R(8, 3))*cp[12] + tmp_24;
	I tmp_95 = (R(2, 9))*cp[0] - tmp_89;
	I tmp_96 = -R(5, 3)*cp[2];
	I tmp_97 = (R(4, 9))*cp[15] - tmp_10 + tmp_9;
	I tmp_98 = (R(2, 3))*cp[3] - R(1, 9)*cp[7];
	I tmp_99 = -R(5, 3)*cp[3];
	I tmp_100 = (R(4, 9))*cp[14] + tmp_19 - tmp_20;
	I tmp_101 = (R(2, 3))*cp[2] - R(1, 9)*cp[6];
	I tmp_102 = -R(10, 27)*cp[2] - R(1, 27)*cp[6];
	I tmp_103 = -R(40, 27)*cp[10] + tmp_55;
	I tmp_104 = -R(10, 27)*cp[3] - R(1, 27)*cp[7];
	I tmp_105 = -R(4, 27)*cp[15] + tmp_62;
	I tmp_106 = -R(4, 27)*cp[14] + tmp_68;
	I tmp_107 = -R(40, 27)*cp[11] + tmp_73;
	I tmp_108 = -R(1, 27)*cp[0] - R(10, 27)*cp[4];
	I tmp_109 = -R(1, 27)*cp[1] - R(10, 27)*cp[5];
	I tmp_110 = -R(5, 3)*cp[4];
	I tmp_111 = -R(1, 9)*cp[1] + (R(2, 3))*cp[5];
	I tmp_112 = -R(5, 3)*cp[5];
	I tmp_113 = -R(1, 9)*cp[0] + (R(2, 3))*cp[4];
	I tmp_114 = 3*cp[2];
	I tmp_115 = -4*cp[11];
	I tmp_116 = 3*cp[3];
	I tmp_117 = -4*cp[10];
	I tmp_118 = (R(4, 3))*cp[10];
	I tmp_119 = (R(8, 3))*cp[11] + tmp_44 + tmp_9;
	I tmp_120 = (R(4, 3))*cp[11];
	I tmp_121 = (R(8, 3))*cp[10] + tmp_19 + tmp_50;
	I tmp_122 = 3*cp[4];
	I tmp_123 = 3*cp[5];
	out[0] = (-cp[2] - tmp_0 - tmp_4)*(-cp[7] - tmp_2 - tmp_5) - (-cp[3] - tmp_2 - tmp_3)*(-cp[6] - tmp_0 - tmp_1);
	out[1] = (tmp_13 + tmp_17 + tmp_18)*(-tmp_21 - tmp_22 - tmp_23 - tmp_25) - (tmp_6 + tmp_7 + tmp_8)*(-tmp_11 - tmp_12 - tmp_14 - tmp_16);
	out[2] = (-tmp_17 - tmp_29 - tmp_33)*(-tmp_21 - tmp_34 - tmp_35 - tmp_37) - (-tmp_26 - tmp_27 - tmp_7)*(-tmp_11 - tmp_28 - tmp_30 - tmp_32);
	out[3] = -(cp[0] + tmp_1 + tmp_38)*(-cp[5] - tmp_39 - tmp_40) + (cp[1] + tmp_40 + tmp_5)*(-cp[4] - tmp_38 - tmp_41);
	out[4] = -(tmp_18 + tmp_47 + tmp_49)*(-tmp_22 - tmp_51 - tmp_52 - tmp_53) + (tmp_42 + tmp_43 + tmp_6)*(-tmp_12 - tmp_45 - tmp_46 - tmp_48);
	out[5] = -(tmp_54 + tmp_56 + tmp_59 + tmp_60)*(tmp_61 + tmp_63 + tmp_66 + tmp_67) + (tmp_54 + tmp_69 + tmp_71 + tmp_72)*(tmp_61 + tmp_74 + tmp_76 + tmp_77);
	out[6] = -(-tmp_56 - tmp_78 - tmp_79 - tmp_80)*(tmp_63 + tmp_81 + tmp_82 + tmp_83) + (tmp_69 + tmp_78 + tmp_84 + tmp_85)*(-tmp_74 - tmp_81 - tmp_86 - tmp_87);
	out[7] = (tmp_27 + tmp_88 + tmp_89)*(tmp_28 + tmp_45 + tmp_90 + tmp_92) - (tmp_33 + tmp_91 + tmp_93)*(tmp_34 + tmp_51 + tmp_94 + tmp_95);
	out[8] = (-tmp_26 - tmp_43 - tmp_96)*(-tmp_30 - tmp_46 - tmp_97 - tmp_98) - (-tmp_29 - tmp_49 - tmp_99)*(-tmp_100 - tmp_101 - tmp_35 - tmp_52);
	out[9] = (-tmp_102 - tmp_103 - tmp_71 - tmp_79)*(tmp_104 + tmp_105 + tmp_76 + tmp_82) - (tmp_102 + tmp_106 + tmp_59 + tmp_84)*(-tmp_104 - tmp_107 - tmp_66 - tmp_86);
	out[10] = (-tmp_103 - tmp_108 - tmp_60 - tmp_85)*(-tmp_105 - tmp_109 - tmp_67 - tmp_87) - (-tmp_106 - tmp_108 - tmp_72 - tmp_80)*(-tmp_107 - tmp_109 - tmp_77 - tmp_83);
	out[11] = (-tmp_110 - tmp_8 - tmp_88)*(tmp_111 + tmp_14 + tmp_90 + tmp_97) - (-tmp_112 - tmp_13 - tmp_93)*(tmp_100 + tmp_113 + tmp_23 + tmp_94);
	out[12] = (cp[0] + tmp_114 + tmp_4)*(-cp[5] - tmp_115 - tmp_116) - (cp[1] + tmp_116 + tmp_3)*(-cp[4] - tmp_114 - tmp_117);
	out[13] = -(tmp_118 + tmp_89 + tmp_96)*(tmp_119 + tmp_16 + tmp_92 + tmp_98) + (tmp_120 + tmp_91 + tmp_99)*(tmp_101 + tmp_121 + tmp_25 + tmp_95);
	out[14] = -(-tmp_110 - tmp_118 - tmp_42)*(tmp_111 + tmp_119 + tmp_32 + tmp_48) + (-tmp_112 - tmp_120 - tmp_47)*(tmp_113 + tmp_121 + tmp_37 + tmp_53);
	out[15] = -(cp[2] + tmp_117 + tmp_122)*(cp[7] + tmp_123 + tmp_39) + (cp[3] + tmp_115 + tmp_123)*(cp[6] + tmp_122 + tmp_41);
}}
#undef R
#undef I