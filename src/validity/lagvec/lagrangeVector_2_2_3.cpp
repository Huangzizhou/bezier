#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVector<2, 2, 3>(const std::span<const fp_t> cpFP, const std::span<Interval> out) {
	assert(cpFP.size() == 20);
	assert(out.size() == 15);
	std::array<Interval, 20> cp;
	for (uint i = 0; i < 20; ++i) cp[i] = cpFP[i];
	I tmp_0 = (R(11, 2))*cp[0];
	I tmp_1 = -cp[4];
	I tmp_2 = (R(11, 2))*cp[1];
	I tmp_3 = -cp[3];
	I tmp_4 = -cp[2];
	I tmp_5 = -cp[5];
	I tmp_6 = (R(59, 32))*cp[0];
	I tmp_7 = (R(9, 32))*cp[16];
	I tmp_8 = (R(13, 32))*cp[4];
	I tmp_9 = (R(59, 32))*cp[1];
	I tmp_10 = (R(27, 8))*cp[9];
	I tmp_11 = (R(9, 8))*cp[11];
	I tmp_12 = -R(81, 16)*cp[19];
	I tmp_13 = tmp_12 + tmp_3;
	I tmp_14 = (R(9, 32))*cp[15];
	I tmp_15 = (R(9, 32))*cp[13];
	I tmp_16 = -tmp_14 + tmp_15;
	I tmp_17 = (R(9, 32))*cp[17];
	I tmp_18 = -R(13, 32)*cp[5];
	I tmp_19 = (R(27, 8))*cp[8];
	I tmp_20 = (R(9, 8))*cp[10];
	I tmp_21 = -R(81, 16)*cp[18];
	I tmp_22 = tmp_21 + tmp_4;
	I tmp_23 = (R(9, 32))*cp[14];
	I tmp_24 = -tmp_23;
	I tmp_25 = (R(9, 32))*cp[12];
	I tmp_26 = tmp_24 + tmp_25;
	I tmp_27 = (R(1, 8))*cp[0];
	I tmp_28 = (R(27, 8))*cp[14];
	I tmp_29 = (R(27, 8))*cp[16];
	I tmp_30 = (R(1, 8))*cp[4];
	I tmp_31 = -R(9, 2)*cp[17];
	I tmp_32 = -R(9, 4)*cp[11];
	I tmp_33 = (R(9, 8))*cp[7];
	I tmp_34 = (R(9, 8))*cp[15];
	I tmp_35 = -tmp_34;
	I tmp_36 = (R(9, 8))*cp[13];
	I tmp_37 = tmp_35 + tmp_36;
	I tmp_38 = (R(1, 8))*cp[1];
	I tmp_39 = (R(27, 4))*cp[19];
	I tmp_40 = tmp_38 + tmp_39;
	I tmp_41 = (R(27, 8))*cp[15];
	I tmp_42 = (R(27, 8))*cp[17];
	I tmp_43 = (R(1, 8))*cp[5];
	I tmp_44 = -R(9, 2)*cp[16];
	I tmp_45 = -R(9, 4)*cp[10];
	I tmp_46 = (R(9, 8))*cp[6];
	I tmp_47 = (R(9, 8))*cp[14];
	I tmp_48 = -tmp_47;
	I tmp_49 = (R(9, 8))*cp[12];
	I tmp_50 = tmp_48 + tmp_49;
	I tmp_51 = (R(27, 4))*cp[18];
	I tmp_52 = tmp_27 + tmp_51;
	I tmp_53 = (R(13, 32))*cp[0];
	I tmp_54 = (R(59, 32))*cp[4];
	I tmp_55 = -R(13, 32)*cp[1];
	I tmp_56 = (R(9, 8))*cp[9];
	I tmp_57 = (R(9, 32))*cp[7];
	I tmp_58 = (R(135, 32))*cp[15];
	I tmp_59 = -R(13, 32)*cp[0];
	I tmp_60 = (R(9, 8))*cp[8];
	I tmp_61 = (R(9, 32))*cp[6];
	I tmp_62 = (R(135, 32))*cp[14];
	I tmp_63 = cp[0] + 9*cp[14] + tmp_44;
	I tmp_64 = (R(9, 2))*cp[11];
	I tmp_65 = 9*cp[15] + cp[1] + tmp_31;
	I tmp_66 = (R(9, 2))*cp[10];
	I tmp_67 = (R(13, 32))*cp[2];
	I tmp_68 = (R(9, 32))*cp[9];
	I tmp_69 = -tmp_68;
	I tmp_70 = (R(9, 32))*cp[11];
	I tmp_71 = tmp_69 + tmp_70;
	I tmp_72 = tmp_12 + tmp_5;
	I tmp_73 = (R(13, 32))*cp[3];
	I tmp_74 = (R(9, 32))*cp[8];
	I tmp_75 = -tmp_74;
	I tmp_76 = (R(9, 32))*cp[10];
	I tmp_77 = tmp_75 + tmp_76;
	I tmp_78 = tmp_1 + tmp_21;
	I tmp_79 = (R(9, 8))*cp[16];
	I tmp_80 = -tmp_79;
	I tmp_81 = -tmp_8;
	I tmp_82 = -R(9, 4)*cp[6];
	I tmp_83 = (R(27, 16))*cp[18];
	I tmp_84 = tmp_27 + tmp_83;
	I tmp_85 = tmp_74 - tmp_76;
	I tmp_86 = -tmp_73;
	I tmp_87 = -tmp_33;
	I tmp_88 = -R(9, 4)*cp[17];
	I tmp_89 = (R(27, 16))*cp[19];
	I tmp_90 = tmp_38 + tmp_89;
	I tmp_91 = tmp_14 - tmp_15;
	I tmp_92 = -tmp_67;
	I tmp_93 = -tmp_46;
	I tmp_94 = -R(9, 4)*cp[16];
	I tmp_95 = tmp_23 - tmp_25;
	I tmp_96 = (R(9, 8))*cp[17];
	I tmp_97 = -tmp_96;
	I tmp_98 = -R(9, 4)*cp[7];
	I tmp_99 = tmp_68 - tmp_70;
	I tmp_100 = tmp_20 + tmp_53;
	I tmp_101 = -R(9, 4)*cp[13];
	I tmp_102 = tmp_55 + tmp_89;
	I tmp_103 = (R(13, 32))*cp[1];
	I tmp_104 = tmp_103 + tmp_11;
	I tmp_105 = -R(9, 4)*cp[12];
	I tmp_106 = tmp_59 + tmp_83;
	I tmp_107 = -cp[0] + tmp_21;
	I tmp_108 = tmp_107 + tmp_29 + tmp_46 - tmp_62;
	I tmp_109 = -cp[1];
	I tmp_110 = tmp_109 + tmp_12;
	I tmp_111 = tmp_110 + tmp_33 + tmp_42 - tmp_58;
	I tmp_112 = (R(1, 8))*cp[2];
	I tmp_113 = (R(27, 8))*cp[6];
	I tmp_114 = (R(9, 2))*cp[7];
	I tmp_115 = -tmp_114;
	I tmp_116 = -tmp_56;
	I tmp_117 = (R(1, 8))*cp[3];
	I tmp_118 = (R(27, 8))*cp[7];
	I tmp_119 = -R(9, 2)*cp[6];
	I tmp_120 = -tmp_60;
	I tmp_121 = (R(9, 2))*cp[12];
	I tmp_122 = cp[0] + tmp_47 + tmp_51 + tmp_60 + tmp_82 + tmp_94;
	I tmp_123 = cp[1] + tmp_34 + tmp_39 + tmp_56 + tmp_88 + tmp_98;
	I tmp_124 = -R(9, 2)*cp[13];
	I tmp_125 = (R(59, 32))*cp[2];
	I tmp_126 = (R(135, 32))*cp[9];
	I tmp_127 = (R(59, 32))*cp[3];
	I tmp_128 = (R(135, 32))*cp[8];
	I tmp_129 = tmp_107 + tmp_113 - tmp_128 + tmp_79;
	I tmp_130 = tmp_110 + tmp_118 - tmp_126 + tmp_96;
	I tmp_131 = cp[0] + 9*cp[8] + tmp_119;
	I tmp_132 = 9*cp[9];
	out[0] = -(-R(9, 2)*cp[14] + 9*cp[16] - tmp_0 - tmp_1)*(9*cp[7] - R(9, 2)*cp[9] - tmp_2 - tmp_3) + (-R(9, 2)*cp[15] + 9*cp[17] - tmp_2 - tmp_5)*(9*cp[6] - R(9, 2)*cp[8] - tmp_0 - tmp_4);
	out[1] = -((R(63, 32))*cp[14] - tmp_6 + tmp_7 - tmp_8)*(-R(63, 16)*cp[17] + (R(135, 32))*cp[7] - tmp_10 - tmp_11 - tmp_13 - tmp_16 - tmp_9) + ((R(63, 32))*cp[15] + tmp_17 + tmp_18 - tmp_9)*(-R(63, 16)*cp[16] + (R(135, 32))*cp[6] - tmp_19 - tmp_20 - tmp_22 - tmp_26 - tmp_6);
	out[2] = -(tmp_27 + tmp_28 - tmp_29 - tmp_30)*(cp[3] - R(9, 4)*cp[9] + tmp_31 + tmp_32 + tmp_33 + tmp_37 + tmp_40) + (tmp_38 + tmp_41 - tmp_42 - tmp_43)*(cp[2] - R(9, 4)*cp[8] + tmp_44 + tmp_45 + tmp_46 + tmp_50 + tmp_52);
	out[3] = -(-R(63, 32)*cp[16] + tmp_24 + tmp_53 + tmp_54)*(-R(27, 8)*cp[11] + (R(135, 32))*cp[13] - R(27, 16)*cp[17] - tmp_13 - tmp_55 - tmp_56 - tmp_57 - tmp_58) + (-R(63, 32)*cp[17] + (R(59, 32))*cp[5] - tmp_14 - tmp_55)*(-R(27, 8)*cp[10] + (R(135, 32))*cp[12] - R(27, 16)*cp[16] - tmp_22 - tmp_59 - tmp_60 - tmp_61 - tmp_62);
	out[4] = -((R(11, 2))*cp[4] - tmp_63)*(9*cp[13] - tmp_3 - tmp_64 - tmp_65) + ((R(11, 2))*cp[5] - tmp_65)*(9*cp[12] - tmp_4 - tmp_63 - tmp_66);
	out[5] = ((R(63, 32))*cp[8] - tmp_6 + tmp_61 - tmp_67)*((R(135, 32))*cp[17] - R(63, 16)*cp[7] - tmp_36 - tmp_41 - tmp_71 - tmp_72 - tmp_9) - ((R(63, 32))*cp[9] + tmp_57 - tmp_73 - tmp_9)*((R(135, 32))*cp[16] - R(63, 16)*cp[6] - tmp_28 - tmp_49 - tmp_6 - tmp_77 - tmp_78);
	out[6] = ((R(9, 16))*cp[10] + (R(45, 32))*cp[8] + tmp_84 + tmp_92 + tmp_93 + tmp_94 + tmp_95)*((R(9, 16))*cp[13] + (R(45, 32))*cp[15] + tmp_18 + tmp_90 + tmp_97 + tmp_98 + tmp_99) - ((R(9, 16))*cp[11] + (R(45, 32))*cp[9] + tmp_86 + tmp_87 + tmp_88 + tmp_90 + tmp_91)*((R(9, 16))*cp[12] + (R(45, 32))*cp[14] + tmp_80 + tmp_81 + tmp_82 + tmp_84 + tmp_85);
	out[7] = (-R(27, 32)*cp[6] + (R(27, 32))*cp[8] + tmp_100 + tmp_50 + tmp_80 + tmp_92)*(-R(45, 32)*cp[17] - R(9, 16)*cp[7] - tmp_101 - tmp_102 - tmp_35 - tmp_43 - tmp_71) - (-R(27, 32)*cp[7] + (R(27, 32))*cp[9] + tmp_104 + tmp_37 + tmp_86 + tmp_97)*(-R(45, 32)*cp[16] - R(9, 16)*cp[6] - tmp_105 - tmp_106 - tmp_30 - tmp_48 - tmp_77);
	out[8] = -((R(63, 16))*cp[12] + tmp_108 + tmp_54 + tmp_85)*((R(27, 16))*cp[11] + (R(135, 32))*cp[13] + tmp_111 + tmp_68 + tmp_86) + ((R(63, 16))*cp[13] + (R(59, 32))*cp[5] + tmp_111 + tmp_99)*((R(27, 16))*cp[10] + (R(135, 32))*cp[12] + tmp_108 + tmp_74 + tmp_92);
	out[9] = -(tmp_10 - tmp_117 - tmp_118 + tmp_38)*(-R(9, 4)*cp[14] + cp[4] + tmp_105 + tmp_119 + tmp_120 + tmp_20 + tmp_52 + tmp_79) + (-tmp_112 - tmp_113 + tmp_19 + tmp_27)*(-R(9, 4)*cp[15] + cp[5] + tmp_101 + tmp_11 + tmp_115 + tmp_116 + tmp_40 + tmp_96);
	out[10] = -((R(27, 32))*cp[14] - R(27, 32)*cp[16] + tmp_100 + tmp_120 + tmp_49 + tmp_81 + tmp_93)*(-R(9, 16)*cp[17] - R(45, 32)*cp[7] - tmp_102 - tmp_116 - tmp_117 - tmp_16 - tmp_32) + ((R(27, 32))*cp[15] - R(27, 32)*cp[17] + tmp_104 + tmp_116 + tmp_18 + tmp_36 + tmp_87)*(-R(9, 16)*cp[16] - R(45, 32)*cp[6] - tmp_106 - tmp_112 - tmp_120 - tmp_26 - tmp_45);
	out[11] = (tmp_11 - tmp_123 - tmp_124 - tmp_43)*(-tmp_112 - tmp_122 + tmp_49 + tmp_66) - (-tmp_117 - tmp_123 + tmp_36 + tmp_64)*(tmp_121 - tmp_122 + tmp_20 - tmp_30);
	out[12] = (-R(63, 32)*cp[6] + tmp_125 + tmp_53 + tmp_75)*((R(135, 32))*cp[11] - R(27, 8)*cp[13] - R(27, 16)*cp[7] - tmp_126 - tmp_17 - tmp_34 - tmp_55 - tmp_72) - (-R(63, 32)*cp[7] + tmp_103 + tmp_127 + tmp_69)*((R(135, 32))*cp[10] - R(27, 8)*cp[12] - R(27, 16)*cp[6] - tmp_128 - tmp_47 - tmp_59 - tmp_7 - tmp_78);
	out[13] = ((R(63, 16))*cp[10] + tmp_125 + tmp_129 + tmp_95)*((R(135, 32))*cp[11] + (R(27, 16))*cp[13] + tmp_130 + tmp_14 + tmp_18) - ((R(63, 16))*cp[11] + tmp_127 + tmp_130 + tmp_91)*((R(135, 32))*cp[10] + (R(27, 16))*cp[12] + tmp_129 + tmp_23 + tmp_81);
	out[14] = ((R(11, 2))*cp[2] - tmp_131)*(9*cp[11] + cp[5] + tmp_109 + tmp_114 + tmp_124 - tmp_132) - (9*cp[10] - tmp_1 - tmp_121 - tmp_131)*(-cp[1] + (R(11, 2))*cp[3] - tmp_115 - tmp_132);
}}
#undef R
#undef I