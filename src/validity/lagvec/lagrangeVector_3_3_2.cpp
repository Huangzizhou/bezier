#include "../lagrangeVector.hpp"

#define R(p, q) (Interval(p) / q)
#define I const Interval 

namespace element_validity {
template<>
void lagrangeVector<3, 3, 2>(const std::span<const fp_t> cpFP, const std::span<Interval> out) {
	assert(cpFP.size() == 30);
	assert(out.size() == 20);
	std::array<Interval, 30> cp;
	for (uint i = 0; i < 30; ++i) cp[i] = cpFP[i];
	I tmp_0 = 3*cp[0];
	I tmp_1 = -4*cp[18];
	I tmp_2 = 3*cp[1];
	I tmp_3 = -4*cp[22];
	I tmp_4 = -cp[10] - tmp_2 - tmp_3;
	I tmp_5 = 4*cp[14];
	I tmp_6 = -tmp_5;
	I tmp_7 = 3*cp[2];
	I tmp_8 = -cp[5] - tmp_6 - tmp_7;
	I tmp_9 = 4*cp[23];
	I tmp_10 = -tmp_9;
	I tmp_11 = -cp[11] - tmp_10 - tmp_7;
	I tmp_12 = 4*cp[13];
	I tmp_13 = -tmp_12;
	I tmp_14 = -cp[4] - tmp_13 - tmp_2;
	I tmp_15 = -4*cp[12];
	I tmp_16 = 4*cp[20];
	I tmp_17 = -tmp_16;
	I tmp_18 = -cp[8] - tmp_17 - tmp_7;
	I tmp_19 = 4*cp[19];
	I tmp_20 = -tmp_19;
	I tmp_21 = -cp[7] - tmp_2 - tmp_20;
	I tmp_22 = -4*cp[21];
	I tmp_23 = -R(4, 3)*cp[27];
	I tmp_24 = (R(4, 3))*cp[21];
	I tmp_25 = (R(5, 3))*cp[0];
	I tmp_26 = tmp_24 + tmp_25;
	I tmp_27 = (R(8, 3))*cp[18];
	I tmp_28 = -tmp_27;
	I tmp_29 = cp[6] + tmp_28;
	I tmp_30 = (R(1, 3))*cp[10];
	I tmp_31 = (R(5, 3))*cp[1];
	I tmp_32 = -tmp_31;
	I tmp_33 = (R(4, 3))*cp[22];
	I tmp_34 = tmp_30 + tmp_32 + tmp_33;
	I tmp_35 = -R(4, 3)*cp[26];
	I tmp_36 = (R(4, 3))*cp[23];
	I tmp_37 = (R(5, 3))*cp[2];
	I tmp_38 = tmp_36 + tmp_37;
	I tmp_39 = (R(8, 3))*cp[14];
	I tmp_40 = -tmp_39;
	I tmp_41 = cp[5] + tmp_40;
	I tmp_42 = -tmp_35 - tmp_38 - tmp_41;
	I tmp_43 = (R(1, 3))*cp[11];
	I tmp_44 = -tmp_37;
	I tmp_45 = tmp_36 + tmp_43 + tmp_44;
	I tmp_46 = -R(4, 3)*cp[25];
	I tmp_47 = tmp_31 + tmp_33;
	I tmp_48 = (R(8, 3))*cp[13];
	I tmp_49 = -tmp_48;
	I tmp_50 = cp[4] + tmp_49;
	I tmp_51 = -tmp_46 - tmp_47 - tmp_50;
	I tmp_52 = -R(4, 3)*cp[24];
	I tmp_53 = (R(8, 3))*cp[12];
	I tmp_54 = -tmp_53;
	I tmp_55 = cp[3] + tmp_54;
	I tmp_56 = -R(4, 3)*cp[29];
	I tmp_57 = (R(8, 3))*cp[20];
	I tmp_58 = -tmp_57;
	I tmp_59 = cp[8] + tmp_58;
	I tmp_60 = -tmp_38 - tmp_56 - tmp_59;
	I tmp_61 = -R(4, 3)*cp[28];
	I tmp_62 = (R(8, 3))*cp[19];
	I tmp_63 = -tmp_62;
	I tmp_64 = cp[7] + tmp_63;
	I tmp_65 = -tmp_47 - tmp_61 - tmp_64;
	I tmp_66 = -tmp_25;
	I tmp_67 = (R(1, 3))*cp[9];
	I tmp_68 = -R(8, 3)*cp[27];
	I tmp_69 = (R(1, 3))*cp[0];
	I tmp_70 = (R(8, 3))*cp[21];
	I tmp_71 = tmp_69 + tmp_70;
	I tmp_72 = (R(4, 3))*cp[18];
	I tmp_73 = -tmp_72;
	I tmp_74 = cp[6] + tmp_73;
	I tmp_75 = (R(1, 3))*cp[1];
	I tmp_76 = tmp_33 + tmp_75;
	I tmp_77 = (R(5, 3))*cp[10] - tmp_76;
	I tmp_78 = -R(8, 3)*cp[26];
	I tmp_79 = (R(1, 3))*cp[2];
	I tmp_80 = (R(8, 3))*cp[23];
	I tmp_81 = tmp_79 + tmp_80;
	I tmp_82 = (R(4, 3))*cp[14];
	I tmp_83 = -tmp_82;
	I tmp_84 = cp[5] + tmp_83;
	I tmp_85 = -tmp_78 - tmp_81 - tmp_84;
	I tmp_86 = tmp_36 + tmp_79;
	I tmp_87 = (R(5, 3))*cp[11] - tmp_86;
	I tmp_88 = -R(8, 3)*cp[25];
	I tmp_89 = (R(8, 3))*cp[22];
	I tmp_90 = tmp_75 + tmp_89;
	I tmp_91 = (R(4, 3))*cp[13];
	I tmp_92 = -tmp_91;
	I tmp_93 = cp[4] + tmp_92;
	I tmp_94 = -tmp_88 - tmp_90 - tmp_93;
	I tmp_95 = -R(8, 3)*cp[24];
	I tmp_96 = (R(4, 3))*cp[12];
	I tmp_97 = -tmp_96;
	I tmp_98 = cp[3] + tmp_97;
	I tmp_99 = -R(8, 3)*cp[29];
	I tmp_100 = (R(4, 3))*cp[20];
	I tmp_101 = -tmp_100;
	I tmp_102 = cp[8] + tmp_101;
	I tmp_103 = -tmp_102 - tmp_81 - tmp_99;
	I tmp_104 = -R(8, 3)*cp[28];
	I tmp_105 = (R(4, 3))*cp[19];
	I tmp_106 = -tmp_105;
	I tmp_107 = cp[7] + tmp_106;
	I tmp_108 = -tmp_104 - tmp_107 - tmp_90;
	I tmp_109 = tmp_24 + tmp_69;
	I tmp_110 = -cp[6];
	I tmp_111 = 4*cp[27];
	I tmp_112 = cp[0] + tmp_22;
	I tmp_113 = cp[1] + tmp_3;
	I tmp_114 = 3*cp[10] + tmp_113;
	I tmp_115 = -4*cp[26];
	I tmp_116 = -cp[2];
	I tmp_117 = tmp_116 + tmp_9;
	I tmp_118 = -cp[5] - tmp_115 - tmp_117;
	I tmp_119 = 3*cp[11] + cp[2] + tmp_10;
	I tmp_120 = -cp[4];
	I tmp_121 = 4*cp[25] + tmp_113 + tmp_120;
	I tmp_122 = -cp[3];
	I tmp_123 = 4*cp[24];
	I tmp_124 = -4*cp[29];
	I tmp_125 = -cp[8] - tmp_117 - tmp_124;
	I tmp_126 = 4*cp[28] - cp[7] + tmp_113;
	I tmp_127 = -R(4, 3)*cp[15];
	I tmp_128 = tmp_25 + tmp_72;
	I tmp_129 = (R(1, 3))*cp[7];
	I tmp_130 = tmp_105 + tmp_129 + tmp_32;
	I tmp_131 = -tmp_80;
	I tmp_132 = tmp_100 + tmp_37;
	I tmp_133 = cp[11] + tmp_56;
	I tmp_134 = -tmp_131 - tmp_132 - tmp_133;
	I tmp_135 = (R(1, 3))*cp[8];
	I tmp_136 = tmp_100 + tmp_135 + tmp_44;
	I tmp_137 = -tmp_89;
	I tmp_138 = tmp_105 + tmp_31;
	I tmp_139 = cp[10] + tmp_61;
	I tmp_140 = -tmp_137 - tmp_138 - tmp_139;
	I tmp_141 = -tmp_70;
	I tmp_142 = cp[9] + tmp_141;
	I tmp_143 = -R(4, 3)*cp[17];
	I tmp_144 = -tmp_132 - tmp_143 - tmp_41;
	I tmp_145 = -R(4, 3)*cp[16];
	I tmp_146 = -tmp_138 - tmp_145 - tmp_50;
	I tmp_147 = (R(1, 3))*cp[6];
	I tmp_148 = tmp_109 + tmp_52;
	I tmp_149 = -tmp_75;
	I tmp_150 = tmp_149 + tmp_30;
	I tmp_151 = (R(4, 3))*cp[28];
	I tmp_152 = tmp_106 + tmp_151;
	I tmp_153 = tmp_150 + tmp_152;
	I tmp_154 = -R(1, 3)*cp[8];
	I tmp_155 = tmp_56 + tmp_86;
	I tmp_156 = -tmp_154 - tmp_155;
	I tmp_157 = -tmp_79;
	I tmp_158 = tmp_157 + tmp_43;
	I tmp_159 = (R(4, 3))*cp[29];
	I tmp_160 = tmp_101 + tmp_159;
	I tmp_161 = tmp_158 + tmp_160;
	I tmp_162 = -R(1, 3)*cp[7];
	I tmp_163 = tmp_61 + tmp_76;
	I tmp_164 = -tmp_162 - tmp_163;
	I tmp_165 = -R(1, 3)*cp[6];
	I tmp_166 = tmp_109 + tmp_23;
	I tmp_167 = tmp_35 + tmp_86;
	I tmp_168 = -tmp_100 - tmp_143 - tmp_167 - tmp_84;
	I tmp_169 = tmp_46 + tmp_76;
	I tmp_170 = -tmp_105 - tmp_145 - tmp_169 - tmp_93;
	I tmp_171 = -R(1, 3)*cp[9];
	I tmp_172 = tmp_69 + tmp_72;
	I tmp_173 = tmp_172 + tmp_23;
	I tmp_174 = (R(8, 3))*cp[24];
	I tmp_175 = (R(4, 3))*cp[15];
	I tmp_176 = tmp_141 + tmp_73;
	I tmp_177 = cp[0] + tmp_122;
	I tmp_178 = cp[1] + tmp_137;
	I tmp_179 = (R(5, 3))*cp[10] + tmp_178;
	I tmp_180 = tmp_152 + tmp_179;
	I tmp_181 = (R(8, 3))*cp[29];
	I tmp_182 = cp[2] + tmp_131;
	I tmp_183 = tmp_101 + tmp_135;
	I tmp_184 = tmp_181 + tmp_182 + tmp_183;
	I tmp_185 = (R(5, 3))*cp[11] + tmp_182;
	I tmp_186 = tmp_160 + tmp_185;
	I tmp_187 = (R(8, 3))*cp[28];
	I tmp_188 = tmp_106 + tmp_129;
	I tmp_189 = tmp_178 + tmp_187 + tmp_188;
	I tmp_190 = cp[0] + (R(8, 3))*cp[27];
	I tmp_191 = -cp[5];
	I tmp_192 = (R(4, 3))*cp[17];
	I tmp_193 = tmp_101 + tmp_192;
	I tmp_194 = (R(8, 3))*cp[26];
	I tmp_195 = tmp_182 + tmp_194;
	I tmp_196 = tmp_191 + tmp_193 + tmp_195;
	I tmp_197 = (R(4, 3))*cp[16];
	I tmp_198 = tmp_106 + tmp_197;
	I tmp_199 = (R(8, 3))*cp[25];
	I tmp_200 = tmp_178 + tmp_199;
	I tmp_201 = tmp_120 + tmp_198 + tmp_200;
	I tmp_202 = (R(5, 3))*cp[9];
	I tmp_203 = cp[0] + (R(4, 3))*cp[27];
	I tmp_204 = -R(8, 3)*cp[15];
	I tmp_205 = tmp_27 + tmp_69;
	I tmp_206 = tmp_105 + tmp_75;
	I tmp_207 = (R(5, 3))*cp[7] - tmp_206;
	I tmp_208 = tmp_57 + tmp_79;
	I tmp_209 = -tmp_36;
	I tmp_210 = cp[11] + tmp_209;
	I tmp_211 = -tmp_208 - tmp_210 - tmp_99;
	I tmp_212 = tmp_100 + tmp_79;
	I tmp_213 = (R(5, 3))*cp[8] - tmp_212;
	I tmp_214 = tmp_62 + tmp_75;
	I tmp_215 = -tmp_33;
	I tmp_216 = cp[10] + tmp_215;
	I tmp_217 = -tmp_104 - tmp_214 - tmp_216;
	I tmp_218 = -tmp_24;
	I tmp_219 = cp[9] + tmp_218;
	I tmp_220 = -R(8, 3)*cp[17];
	I tmp_221 = -tmp_208 - tmp_220 - tmp_84;
	I tmp_222 = -R(8, 3)*cp[16];
	I tmp_223 = -tmp_214 - tmp_222 - tmp_93;
	I tmp_224 = (R(4, 3))*cp[24];
	I tmp_225 = (R(8, 3))*cp[15];
	I tmp_226 = tmp_218 + tmp_28;
	I tmp_227 = cp[1] + tmp_63;
	I tmp_228 = tmp_215 + tmp_227;
	I tmp_229 = tmp_187 + tmp_228 + tmp_30;
	I tmp_230 = (R(5, 3))*cp[8];
	I tmp_231 = cp[2] + tmp_58;
	I tmp_232 = tmp_209 + tmp_231;
	I tmp_233 = tmp_159 + tmp_230 + tmp_232;
	I tmp_234 = tmp_181 + tmp_232 + tmp_43;
	I tmp_235 = (R(5, 3))*cp[7];
	I tmp_236 = tmp_151 + tmp_228 + tmp_235;
	I tmp_237 = (R(5, 3))*cp[6];
	I tmp_238 = (R(4, 3))*cp[26];
	I tmp_239 = (R(8, 3))*cp[17];
	I tmp_240 = tmp_191 + tmp_232 + tmp_238 + tmp_239;
	I tmp_241 = (R(4, 3))*cp[25];
	I tmp_242 = (R(8, 3))*cp[16];
	I tmp_243 = tmp_120 + tmp_228 + tmp_241 + tmp_242;
	I tmp_244 = 4*cp[15];
	I tmp_245 = cp[0] + tmp_1;
	I tmp_246 = cp[1] + tmp_20;
	I tmp_247 = 3*cp[7] + tmp_246;
	I tmp_248 = cp[11] + tmp_116;
	I tmp_249 = -tmp_124 - tmp_16 - tmp_248;
	I tmp_250 = cp[2] + tmp_17;
	I tmp_251 = 3*cp[8] + tmp_250;
	I tmp_252 = -cp[1];
	I tmp_253 = cp[10] + tmp_252;
	I tmp_254 = 4*cp[28] - tmp_19 - tmp_253;
	I tmp_255 = -cp[9];
	I tmp_256 = 4*cp[17] + tmp_191 + tmp_250;
	I tmp_257 = 4*cp[16] + tmp_120 + tmp_246;
	I tmp_258 = tmp_25 + tmp_96;
	I tmp_259 = (R(1, 3))*cp[4];
	I tmp_260 = tmp_259 + tmp_32 + tmp_91;
	I tmp_261 = tmp_37 + tmp_82;
	I tmp_262 = -cp[11] - tmp_131 - tmp_261 - tmp_35;
	I tmp_263 = (R(1, 3))*cp[5];
	I tmp_264 = tmp_263 + tmp_44 + tmp_82;
	I tmp_265 = tmp_31 + tmp_91;
	I tmp_266 = -cp[10] - tmp_137 - tmp_265 - tmp_46;
	I tmp_267 = -tmp_143 - tmp_261 - tmp_59;
	I tmp_268 = -tmp_145 - tmp_265 - tmp_64;
	I tmp_269 = (R(1, 3))*cp[3];
	I tmp_270 = tmp_241 + tmp_92;
	I tmp_271 = tmp_150 + tmp_270;
	I tmp_272 = (R(1, 3))*cp[5] - tmp_167;
	I tmp_273 = tmp_238 + tmp_83;
	I tmp_274 = tmp_158 + tmp_273;
	I tmp_275 = (R(1, 3))*cp[4] - tmp_169;
	I tmp_276 = -R(1, 3)*cp[3];
	I tmp_277 = -tmp_102 - tmp_143 - tmp_155 - tmp_82;
	I tmp_278 = -tmp_107 - tmp_145 - tmp_163 - tmp_91;
	I tmp_279 = tmp_69 + tmp_96;
	I tmp_280 = tmp_190 + tmp_97;
	I tmp_281 = tmp_179 + tmp_270;
	I tmp_282 = tmp_263 + tmp_83;
	I tmp_283 = tmp_195 + tmp_282;
	I tmp_284 = tmp_185 + tmp_273;
	I tmp_285 = tmp_259 + tmp_92;
	I tmp_286 = tmp_200 + tmp_285;
	I tmp_287 = cp[0] + tmp_97;
	I tmp_288 = tmp_141 + tmp_287;
	I tmp_289 = cp[8] + tmp_116;
	I tmp_290 = tmp_82 + tmp_99;
	I tmp_291 = -tmp_143 - tmp_289 - tmp_290 - tmp_80;
	I tmp_292 = cp[7] + tmp_252;
	I tmp_293 = tmp_104 + tmp_91;
	I tmp_294 = -tmp_145 - tmp_292 - tmp_293 - tmp_89;
	I tmp_295 = tmp_75 + tmp_91;
	I tmp_296 = -tmp_145 - tmp_162 - tmp_295;
	I tmp_297 = tmp_193 + tmp_263;
	I tmp_298 = tmp_157 + tmp_297;
	I tmp_299 = tmp_79 + tmp_82;
	I tmp_300 = -tmp_143 - tmp_154 - tmp_299;
	I tmp_301 = tmp_198 + tmp_259;
	I tmp_302 = tmp_149 + tmp_301;
	I tmp_303 = -tmp_133 - tmp_209 - tmp_212 - tmp_35 - tmp_82;
	I tmp_304 = -tmp_139 - tmp_206 - tmp_215 - tmp_46 - tmp_91;
	I tmp_305 = tmp_175 + tmp_73;
	I tmp_306 = tmp_203 + tmp_97;
	I tmp_307 = cp[1] + tmp_215 + tmp_270;
	I tmp_308 = tmp_152 + tmp_30 + tmp_307;
	I tmp_309 = cp[2] + tmp_209;
	I tmp_310 = tmp_273 + tmp_309;
	I tmp_311 = tmp_297 + tmp_310;
	I tmp_312 = tmp_160 + tmp_310 + tmp_43;
	I tmp_313 = tmp_301 + tmp_307;
	I tmp_314 = tmp_218 + tmp_224;
	I tmp_315 = tmp_192 + tmp_83;
	I tmp_316 = tmp_135 + tmp_160 + tmp_309 + tmp_315;
	I tmp_317 = tmp_197 + tmp_92;
	I tmp_318 = cp[1] + tmp_129 + tmp_152 + tmp_215 + tmp_317;
	I tmp_319 = tmp_218 + tmp_67;
	I tmp_320 = tmp_227 + tmp_235 + tmp_317;
	I tmp_321 = tmp_231 + tmp_239 + tmp_282;
	I tmp_322 = tmp_227 + tmp_242 + tmp_285;
	I tmp_323 = tmp_230 + tmp_231 + tmp_315;
	I tmp_324 = tmp_28 + tmp_287;
	I tmp_325 = -tmp_248 - tmp_290 - tmp_35 - tmp_57;
	I tmp_326 = -tmp_253 - tmp_293 - tmp_46 - tmp_62;
	I tmp_327 = tmp_53 + tmp_69;
	I tmp_328 = (R(5, 3))*cp[4] - tmp_295;
	I tmp_329 = tmp_39 + tmp_79;
	I tmp_330 = -tmp_210 - tmp_329 - tmp_78;
	I tmp_331 = (R(5, 3))*cp[5] - tmp_299;
	I tmp_332 = tmp_48 + tmp_75;
	I tmp_333 = -tmp_216 - tmp_332 - tmp_88;
	I tmp_334 = -tmp_102 - tmp_220 - tmp_329;
	I tmp_335 = -tmp_107 - tmp_222 - tmp_332;
	I tmp_336 = tmp_203 + tmp_54;
	I tmp_337 = cp[1] + tmp_49;
	I tmp_338 = tmp_215 + tmp_337;
	I tmp_339 = tmp_199 + tmp_30 + tmp_338;
	I tmp_340 = (R(5, 3))*cp[5];
	I tmp_341 = cp[2] + tmp_40;
	I tmp_342 = tmp_209 + tmp_341;
	I tmp_343 = tmp_238 + tmp_340 + tmp_342;
	I tmp_344 = tmp_194 + tmp_342 + tmp_43;
	I tmp_345 = (R(5, 3))*cp[4];
	I tmp_346 = tmp_241 + tmp_338 + tmp_345;
	I tmp_347 = cp[0] + tmp_54;
	I tmp_348 = (R(5, 3))*cp[3] + tmp_347;
	I tmp_349 = tmp_39 + tmp_56;
	I tmp_350 = -tmp_220 - tmp_289 - tmp_349 - tmp_36;
	I tmp_351 = tmp_48 + tmp_61;
	I tmp_352 = -tmp_222 - tmp_292 - tmp_33 - tmp_351;
	I tmp_353 = tmp_198 + tmp_337 + tmp_345;
	I tmp_354 = tmp_183 + tmp_239 + tmp_341;
	I tmp_355 = tmp_188 + tmp_242 + tmp_337;
	I tmp_356 = tmp_193 + tmp_340 + tmp_341;
	I tmp_357 = -tmp_100 - tmp_248 - tmp_349 - tmp_78;
	I tmp_358 = -tmp_105 - tmp_253 - tmp_351 - tmp_88;
	I tmp_359 = cp[0] + tmp_15;
	I tmp_360 = cp[1] + 3*cp[4] + tmp_13;
	I tmp_361 = -tmp_115 - tmp_248 - tmp_5;
	I tmp_362 = cp[2] + 3*cp[5] + tmp_6;
	I tmp_363 = 4*cp[25] - tmp_12 - tmp_253;
	I tmp_364 = 4*cp[17] - tmp_289 - tmp_5;
	I tmp_365 = 4*cp[16] - tmp_12 - tmp_292;
	out[0] = (-tmp_11*tmp_14 + tmp_4*tmp_8)*(-cp[6] - tmp_0 - tmp_1) + (tmp_11*tmp_21 - tmp_18*tmp_4)*(-cp[3] - tmp_0 - tmp_15) + (tmp_14*tmp_18 - tmp_21*tmp_8)*(-cp[9] - tmp_0 - tmp_22);
	out[1] = (tmp_34*tmp_42 - tmp_45*tmp_51)*(-tmp_23 - tmp_26 - tmp_29) + (-tmp_34*tmp_60 + tmp_45*tmp_65)*(-tmp_26 - tmp_52 - tmp_55) + (-tmp_42*tmp_65 + tmp_51*tmp_60)*(tmp_24 + tmp_66 + tmp_67);
	out[2] = ((R(5, 3))*cp[9] - tmp_109)*(tmp_103*tmp_94 - tmp_108*tmp_85) + (-tmp_103*tmp_77 + tmp_108*tmp_87)*(-tmp_71 - tmp_95 - tmp_98) + (tmp_77*tmp_85 - tmp_87*tmp_94)*(-tmp_68 - tmp_71 - tmp_74);
	out[3] = (3*cp[9] + tmp_112)*(-tmp_118*tmp_126 + tmp_121*tmp_125) + (tmp_114*tmp_118 - tmp_119*tmp_121)*(tmp_110 + tmp_111 + tmp_112) + (-tmp_114*tmp_125 + tmp_119*tmp_126)*(tmp_112 + tmp_122 + tmp_123);
	out[4] = (tmp_130*tmp_134 - tmp_136*tmp_140)*(-tmp_127 - tmp_128 - tmp_55) + (-tmp_130*tmp_144 + tmp_136*tmp_146)*(-tmp_128 - tmp_142 - tmp_23) + (-tmp_134*tmp_146 + tmp_140*tmp_144)*(tmp_147 + tmp_66 + tmp_72);
	out[5] = (-tmp_165 - tmp_166)*(tmp_153*tmp_168 - tmp_161*tmp_170) + (-tmp_171 - tmp_173)*(tmp_156*tmp_170 - tmp_164*tmp_168) + (-tmp_153*tmp_156 + tmp_161*tmp_164)*(-tmp_127 - tmp_148 - tmp_72 - tmp_98);
	out[6] = (-tmp_180*tmp_184 + tmp_186*tmp_189)*(tmp_174 + tmp_175 + tmp_176 + tmp_177) + (tmp_180*tmp_196 - tmp_186*tmp_201)*(tmp_147 + tmp_176 + tmp_190) + (tmp_184*tmp_201 - tmp_189*tmp_196)*(tmp_176 + tmp_202 + tmp_203);
	out[7] = ((R(5, 3))*cp[6] - tmp_172)*(-tmp_211*tmp_223 + tmp_217*tmp_221) + (tmp_207*tmp_211 - tmp_213*tmp_217)*(-tmp_204 - tmp_205 - tmp_98) + (-tmp_207*tmp_221 + tmp_213*tmp_223)*(-tmp_205 - tmp_219 - tmp_68);
	out[8] = (-tmp_229*tmp_233 + tmp_234*tmp_236)*(tmp_177 + tmp_224 + tmp_225 + tmp_226) + (tmp_229*tmp_240 - tmp_234*tmp_243)*(tmp_203 + tmp_226 + tmp_237) + (tmp_233*tmp_243 - tmp_236*tmp_240)*(tmp_190 + tmp_226 + tmp_67);
	out[9] = (3*cp[6] + tmp_245)*(-tmp_249*tmp_257 + tmp_254*tmp_256) + (tmp_247*tmp_249 - tmp_251*tmp_254)*(tmp_122 + tmp_244 + tmp_245) + (-tmp_247*tmp_256 + tmp_251*tmp_257)*(tmp_111 + tmp_245 + tmp_255);
	out[10] = (-tmp_260*tmp_262 + tmp_264*tmp_266)*(-tmp_127 - tmp_258 - tmp_29) + (tmp_260*tmp_267 - tmp_264*tmp_268)*(-tmp_142 - tmp_258 - tmp_52) + (tmp_262*tmp_268 - tmp_266*tmp_267)*(tmp_269 + tmp_66 + tmp_96);
	out[11] = (-tmp_148 - tmp_276)*(-tmp_271*tmp_277 + tmp_274*tmp_278) + (tmp_271*tmp_272 - tmp_274*tmp_275)*(-tmp_127 - tmp_166 - tmp_74 - tmp_96) + (-tmp_272*tmp_278 + tmp_275*tmp_277)*(-tmp_171 - tmp_279 - tmp_52);
	out[12] = (tmp_281*tmp_283 - tmp_284*tmp_286)*(tmp_110 + tmp_141 + tmp_175 + tmp_280) + (-tmp_281*tmp_291 + tmp_284*tmp_294)*(tmp_174 + tmp_269 + tmp_288) + (-tmp_283*tmp_294 + tmp_286*tmp_291)*(tmp_202 + tmp_224 + tmp_288);
	out[13] = (-tmp_296*tmp_298 + tmp_300*tmp_302)*(-tmp_173 - tmp_219 - tmp_52 - tmp_96) + (tmp_296*tmp_303 - tmp_300*tmp_304)*(-tmp_127 - tmp_172 - tmp_276) + (tmp_298*tmp_304 - tmp_302*tmp_303)*(-tmp_127 - tmp_165 - tmp_279);
	out[14] = (tmp_308*tmp_311 - tmp_312*tmp_313)*(tmp_147 + tmp_218 + tmp_305 + tmp_306) + (-tmp_308*tmp_316 + tmp_312*tmp_318)*(tmp_269 + tmp_287 + tmp_305 + tmp_314) + (-tmp_311*tmp_318 + tmp_313*tmp_316)*(tmp_224 + tmp_306 + tmp_319 + tmp_73);
	out[15] = (-tmp_320*tmp_321 + tmp_322*tmp_323)*(tmp_224 + tmp_255 + tmp_28 + tmp_280) + (tmp_320*tmp_325 - tmp_323*tmp_326)*(tmp_225 + tmp_269 + tmp_324) + (tmp_321*tmp_326 - tmp_322*tmp_325)*(tmp_175 + tmp_237 + tmp_324);
	out[16] = ((R(5, 3))*cp[3] - tmp_279)*(tmp_330*tmp_335 - tmp_333*tmp_334) + (-tmp_328*tmp_330 + tmp_331*tmp_333)*(-tmp_204 - tmp_327 - tmp_74) + (tmp_328*tmp_334 - tmp_331*tmp_335)*(-tmp_219 - tmp_327 - tmp_95);
	out[17] = (tmp_314 + tmp_348)*(-tmp_339*tmp_350 + tmp_344*tmp_352) + (tmp_339*tmp_343 - tmp_344*tmp_346)*(tmp_110 + tmp_218 + tmp_225 + tmp_336) + (-tmp_343*tmp_352 + tmp_346*tmp_350)*(tmp_174 + tmp_319 + tmp_347);
	out[18] = (tmp_305 + tmp_348)*(-tmp_354*tmp_358 + tmp_355*tmp_357) + (tmp_353*tmp_354 - tmp_355*tmp_356)*(tmp_174 + tmp_255 + tmp_336 + tmp_73) + (-tmp_353*tmp_357 + tmp_356*tmp_358)*(tmp_147 + tmp_225 + tmp_347 + tmp_73);
	out[19] = (3*cp[3] + tmp_359)*(tmp_361*tmp_365 - tmp_363*tmp_364) + (-tmp_360*tmp_361 + tmp_362*tmp_363)*(tmp_110 + tmp_244 + tmp_359) + (tmp_360*tmp_364 - tmp_362*tmp_365)*(tmp_123 + tmp_255 + tmp_359);
}}
#undef R
#undef I